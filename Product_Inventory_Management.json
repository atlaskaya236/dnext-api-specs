{
  "swagger": "2.0",
  "info": {
    "description": "TMF API Reference : TMF 637 - Product Inventory Management Release : 19.0 - June 2019 The Product Inventory Management API provides standardized mechanism for product inventory management such as creation, update and retrieval of the representation of a product in the inventory. It also allows the notification of events related to product lifecycle Product resource A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s). Product Inventory API performs the following operations on product : - Retrieval of a product or a collection of products depending on filter criteria - Partial update of a product (including updating rules and for administration purpose) - Creation of a product (including default values and creation rules and for administration purpose) - Deletion of a product (for administration purposes) - Notification of events on product. Copyright Â© TM Forum 2019. All Rights Reserved",
    "version": "Version v4 (prepared with Product Inventory Management API REST Specification TMF637 Release 19.0)",
    "title": "Orbitant Product Inventory Management API",
    "contact": {
      "name": "PiA(people in action)",
      "url": "http://www.pia-team.com/",
      "email": "info@pia-team.com"
    },
    "license": {
      "name": "PiA License",
      "url": "http://www.pia-team.com"
    }
  },
  "host": "sprint58-release-test.test.orbitant.dev",
  "basePath": "/api/productInventoryManagement/v4",
  "tags": [
    {
      "name": "hub",
      "description": "The Hub API"
    },
    {
      "name": "product",
      "description": "The Product API"
    }
  ],
  "paths": {
    "/hub": {
      "get": {
        "tags": [
          "events subscription",
          "hub"
        ],
        "summary": "List listeners",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "listListeners",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventSubscription"
              }
            }
          },
          "204": {
            "description": "Deleted",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventSubscription"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "hub"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "hub"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the registered listener",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/product": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "List or find Product objects",
        "description": "This operation list or find Product entities",
        "operationId": "listProduct",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Creates a Product",
        "description": "This operation creates a Product entity.",
        "operationId": "createProduct",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The Product to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/product/{id}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Retrieves a Product by ID",
        "description": "This operation retrieves a Product entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveProduct",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "product"
        ],
        "summary": "Deletes a Product",
        "description": "This operation deletes a Product entity.",
        "operationId": "deleteProduct",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "product"
        ],
        "summary": "Updates partially a Product",
        "description": "This operation updates partially a Product entity.",
        "operationId": "patchProduct_1",
        "consumes": [
          "application/merge-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The Product to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductUpdate"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AgreementItemRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "agreementItemId": {
          "type": "string",
          "description": "Identifier of the agreement"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        }
      },
      "title": "AgreementItemRef",
      "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications."
    },
    "BillingAccountRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the billing account"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the billing account"
        },
        "name": {
          "type": "string",
          "description": "Name of the billing account"
        }
      },
      "title": "BillingAccountRef",
      "description": "BillingAccount reference. A BillingAccount is a detailed description of a bill structure."
    },
    "Characteristic": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "value": {
          "type": "string"
        },
        "valueType": {
          "type": "string",
          "description": "Data type of the value of the characteristic"
        }
      },
      "title": "Characteristic",
      "description": "Describes a given characteristic of an object or entity through a name/value pair."
    },
    "Error": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string"
        },
        "@schemaLocation": {
          "type": "string"
        },
        "@type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "referenceError": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "Error",
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
    },
    "EventSubscription": {
      "type": "object",
      "required": [
        "callback",
        "id"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        }
      },
      "title": "EventSubscription",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "EventSubscriptionInput": {
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      },
      "title": "EventSubscriptionInput",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "ExternalReference": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "externalReferenceType": {
          "type": "string",
          "description": "Type of the external reference"
        },
        "href": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "External reference name"
        }
      },
      "title": "ExternalReference",
      "description": "External reference of the individual or reference in other system"
    },
    "Money": {
      "type": "object",
      "properties": {
        "unit": {
          "type": "string",
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A positive floating point number"
        }
      },
      "title": "Money",
      "description": "A base / value business entity used to represent money"
    },
    "Price": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "dutyFreeAmount": {
          "$ref": "#/definitions/Money"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration"
        },
        "tax": {
          "type": "array",
          "description": "Tax",
          "items": {
            "$ref": "#/definitions/TaxItem"
          }
        },
        "taxIncludedAmount": {
          "$ref": "#/definitions/Money"
        },
        "taxRate": {
          "type": "number",
          "format": "float",
          "description": "Tax rate"
        }
      },
      "title": "Price",
      "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration."
    },
    "PriceAlteration": {
      "type": "object",
      "required": [
        "price",
        "priceType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "applicationDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail the semantics of this order item price alteration"
        },
        "name": {
          "type": "string",
          "description": "Name of the order item price alteration"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price such as recurring, one time and usage."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
        },
        "productOfferingPrice": {
          "$ref": "#/definitions/ProductOfferingPriceRef"
        },
        "recurringChargePeriod": {
          "type": "string",
          "description": "Could be month, week..."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        }
      },
      "title": "PriceAlteration",
      "description": "Is an amount, usually of money, that modifies the price charged for an order item."
    },
    "Product": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementItemRef"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedChannel"
          }
        },
        "createdBy": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Is the description of the product. It could be copied from the description of the Product Offering."
        },
        "expectedExpiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the expected expiry date when the product was ordered"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "href": {
          "type": "string",
          "description": "Reference of the product"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product"
        },
        "isBundle": {
          "type": "boolean",
          "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
        },
        "isCustomerVisible": {
          "type": "boolean",
          "description": "If true, the product is visible by the customer."
        },
        "name": {
          "type": "string",
          "description": "Name of the product. It could be the same as the name of the product offering"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was ordered"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPlaceRefOrValue"
          }
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRefOrValue"
          }
        },
        "productCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productOrderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedProductOrderItem"
          }
        },
        "productPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPrice"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "productSerialNumber": {
          "type": "string",
          "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "productTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTerm"
          }
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date from which the product starts"
        },
        "status": {
          "type": "string"
        },
        "statusReason": {
          "type": "string",
          "description": "Reason explanation of the product status"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was terminated"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Product",
      "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s)."
    },
    "ProductCreate": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementItemRef"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedChannel"
          }
        },
        "description": {
          "type": "string",
          "description": "Is the description of the product. It could be copied from the description of the Product Offering."
        },
        "expectedExpiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the expected expiry date when the product was ordered"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product"
        },
        "isBundle": {
          "type": "boolean",
          "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
        },
        "isCustomerVisible": {
          "type": "boolean",
          "description": "If true, the product is visible by the customer."
        },
        "name": {
          "type": "string",
          "description": "Name of the product. It could be the same as the name of the product offering"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was ordered"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPlaceRefOrValue"
          }
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRefOrValue"
          }
        },
        "productCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productOrderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedProductOrderItem"
          }
        },
        "productPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPrice"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "productSerialNumber": {
          "type": "string",
          "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "productTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTerm"
          }
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date from which the product starts"
        },
        "status": {
          "type": "string"
        },
        "statusReason": {
          "type": "string",
          "description": "Reason explanation of the product status"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was terminated"
        }
      },
      "title": "ProductCreate",
      "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s). Skipped properties: id,href"
    },
    "ProductOfferingPriceRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Version of the product offering price"
        }
      },
      "title": "ProductOfferingPriceRef",
      "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased"
    },
    "ProductOfferingRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Version of the product offering"
        }
      },
      "title": "ProductOfferingRef",
      "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information."
    },
    "ProductPrice": {
      "type": "object",
      "required": [
        "price",
        "priceType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail the semantics of this product price."
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name such as \"Subscription price\"."
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "productOfferingPrice": {
          "$ref": "#/definitions/ProductOfferingPriceRef"
        },
        "productPriceAlteration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAlteration"
          }
        },
        "recurringChargePeriod": {
          "type": "string",
          "description": "Could be month, week..."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        }
      },
      "title": "ProductPrice",
      "description": "An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time."
    },
    "ProductRefOrValue": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementItemRef"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "description": {
          "type": "string",
          "description": "Is the description of the product. It could be copied from the description of the Product Offering."
        },
        "href": {
          "type": "string",
          "description": "Reference of the product"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the product"
        },
        "isBundle": {
          "type": "boolean",
          "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
        },
        "isCustomerVisible": {
          "type": "boolean",
          "description": "If true, the product is visible by the customer."
        },
        "name": {
          "type": "string",
          "description": "Name of the product. It could be the same as the name of the product offering"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was ordered"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPlaceRefOrValue"
          }
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRefOrValue"
          }
        },
        "productCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productOrderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedProductOrderItem"
          }
        },
        "productPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPrice"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "productSerialNumber": {
          "type": "string",
          "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "productTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTerm"
          }
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date from which the product starts"
        },
        "status": {
          "type": "string"
        },
        "statusReason": {
          "type": "string",
          "description": "Reason explanation of the product status"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was terminated"
        }
      },
      "title": "ProductRefOrValue",
      "description": "A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself"
    },
    "ProductRelationship": {
      "type": "object",
      "required": [
        "product",
        "relationshipType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "product": {
          "$ref": "#/definitions/ProductRefOrValue"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of the product relationship, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
        }
      },
      "title": "ProductRelationship",
      "description": "Linked products to the one instantiate, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
    },
    "ProductSpecificationRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "targetProductSchema": {
          "$ref": "#/definitions/TargetProductSchema"
        },
        "version": {
          "type": "string",
          "description": "Version of the product specification"
        }
      },
      "title": "ProductSpecificationRef",
      "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role."
    },
    "ProductTerm": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "description": {
          "type": "string",
          "description": "Description of the productTerm"
        },
        "duration": {
          "$ref": "#/definitions/Quantity"
        },
        "name": {
          "type": "string",
          "description": "Name of the productTerm"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "ProductTerm",
      "description": "Description of a productTerm linked to this product. This represent a commitment with a duration"
    },
    "ProductUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementItemRef"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedChannel"
          }
        },
        "description": {
          "type": "string",
          "description": "Is the description of the product. It could be copied from the description of the Product Offering."
        },
        "expectedExpiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the expected expiry date when the product was ordered"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "isBundle": {
          "type": "boolean",
          "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
        },
        "isCustomerVisible": {
          "type": "boolean",
          "description": "If true, the product is visible by the customer."
        },
        "name": {
          "type": "string",
          "description": "Name of the product. It could be the same as the name of the product offering"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was ordered"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPlaceRefOrValue"
          }
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRefOrValue"
          }
        },
        "productCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productOrderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedProductOrderItem"
          }
        },
        "productPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPrice"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "productSerialNumber": {
          "type": "string",
          "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "productTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTerm"
          }
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date from which the product starts"
        },
        "status": {
          "type": "string"
        },
        "statusReason": {
          "type": "string",
          "description": "Reason explanation of the product status"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was terminated"
        }
      },
      "title": "ProductUpdate",
      "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s). Skipped properties: id,href"
    },
    "Quantity": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Numeric value in a given unit"
        },
        "units": {
          "type": "string",
          "description": "Unit"
        }
      },
      "title": "Quantity",
      "description": "An amount in a given unit"
    },
    "RelatedChannel": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the channel."
        },
        "role": {
          "type": "string",
          "description": "Role playing by the channel."
        }
      },
      "title": "RelatedChannel",
      "description": "Related channel to another entity. May be online web, mobile app, social ,etc."
    },
    "RelatedParty": {
      "type": "object",
      "required": [
        "@referredType",
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        }
      },
      "title": "RelatedParty",
      "description": "Related Entity reference. A related party defines party or party role linked to a specific entity."
    },
    "RelatedPlaceRefOrValue": {
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
        },
        "role": {
          "type": "string"
        }
      },
      "title": "RelatedPlaceRefOrValue",
      "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself"
    },
    "RelatedProductOrderItem": {
      "type": "object",
      "required": [
        "orderItemId",
        "productOrderId"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "orderItemAction": {
          "type": "string",
          "description": "Action of the order item for this product"
        },
        "orderItemId": {
          "type": "string",
          "description": "Identifier of the order item where the product was managed"
        },
        "productOrderHref": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "productOrderId": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "role": {
          "type": "string",
          "description": "role of the product order item for this product"
        }
      },
      "title": "RelatedProductOrderItem",
      "description": "RelatedProductOrderItem (ProductOrder item) .The product order item which triggered product creation/change/termination."
    },
    "ResourceRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the resource"
        },
        "value": {
          "type": "string",
          "description": "The resource value that can be used to identify a resource with a public key (e.g.: a tel nr, an msisdn)"
        }
      },
      "title": "ResourceRef"
    },
    "ServiceRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        }
      },
      "title": "ServiceRef",
      "description": "Service reference, for when Service is used by other entities"
    },
    "TargetProductSchema": {
      "type": "object",
      "required": [
        "@schemaLocation",
        "@type"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target product"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the target product"
        }
      },
      "title": "TargetProductSchema",
      "description": "The reference object to the schema and type of target product which is described by product specification"
    },
    "TaxItem": {
      "type": "object",
      "required": [
        "taxAmount",
        "taxCategory",
        "taxRate"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "taxAmount": {
          "description": "Tax amount",
          "$ref": "#/definitions/Money"
        },
        "taxCategory": {
          "type": "string",
          "description": "A categorization of the tax rate"
        },
        "taxRate": {
          "type": "number",
          "description": "Tax rate"
        }
      },
      "title": "TaxItem"
    },
    "TimePeriod": {
      "type": "object",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
        }
      },
      "title": "TimePeriod",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
    }
  }
}