{
  "swagger": "2.0",
  "info": {
    "title": "Customer Management",
    "description": "This is Swagger UI environment generated for the TMF Customer Management specification",
    "version": "4.0.0"
  },
  "host": "serverRoot",
  "basePath": "/api/customerManagement/v4/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
    {
      "name": "customer"
    },
    {
      "name": "notification listeners (client side)"
    },
    {
      "name": "events subscription"
    }
  ],
  "paths": {
    "/customer": {
      "get": {
        "operationId": "listCustomer",
        "summary": "List or find Customer objects",
        "description": "This operation list or find Customer entities",
        "tags": [
          "customer"
        ],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createCustomer",
        "summary": "Creates a Customer",
        "description": "This operation creates a Customer entity.",
        "tags": [
          "customer"
        ],
        "parameters": [
          {
            "name": "customer",
            "description": "The Customer to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customer/{id}/history": {
      "get": {
        "operationId": "retrieveCustomerHistory",
        "summary": "Retrieves a Customer History by Customer Id",
        "description": "This operation retrieves a CustomerHistory entity.",
        "tags": [
          "customer",
          "history"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Customer",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CustomerHistory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customer/{id}": {
      "get": {
        "operationId": "retrieveCustomer",
        "summary": "Retrieves a Customer by ID",
        "description": "This operation retrieves a Customer entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "customer"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Customer",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchCustomer",
        "summary": "Updates partially a Customer",
        "description": "This operation updates partially a Customer entity.",
        "tags": [
          "customer"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Customer",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "customer",
            "description": "The Customer to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteCustomer",
        "summary": "Deletes a Customer",
        "description": "This operation deletes a Customer entity.",
        "tags": [
          "customer"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Customer",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "operationId": "unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/customerCreateEvent": {
      "post": {
        "operationId": "listenToCustomerCreateEvent",
        "summary": "Client listener for entity CustomerCreateEvent",
        "description": "Example of a client listener for receiving the notification CustomerCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/CustomerCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/customerAttributeValueChangeEvent": {
      "post": {
        "operationId": "listenToCustomerAttributeValueChangeEvent",
        "summary": "Client listener for entity CustomerAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification CustomerAttributeValueChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/CustomerAttributeValueChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/customerStateChangeEvent": {
      "post": {
        "operationId": "listenToCustomerStateChangeEvent",
        "summary": "Client listener for entity CustomerStateChangeEvent",
        "description": "Example of a client listener for receiving the notification CustomerStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/CustomerStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/customerDeleteEvent": {
      "post": {
        "operationId": "listenToCustomerDeleteEvent",
        "summary": "Client listener for entity CustomerDeleteEvent",
        "description": "Example of a client listener for receiving the notification CustomerDeleteEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/CustomerDeleteEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "/listener/customerListEvent": {
    "post": {
      "operationId": "listenToCustomerListEvent",
      "summary": "Client listener for entity CustomerListEvent",
      "description": "Example of a client listener for receiving the notification CustomerListEvent",
      "tags": [
        "notification listeners (client side)"
      ],
      "parameters": [
        {
          "schema": {
            "$ref": "#/definitions/CustomerListEvent"
          },
          "description": "The event data",
          "required": true,
          "name": "data",
          "in": "body"
        }
      ],
      "responses": {
        "201": {
          "description": "Notified",
          "schema": {
            "$ref": "#/definitions/EventSubscription"
          }
        },
        "400": {
          "description": "Bad Request",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "401": {
          "description": "Unauthorized",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "403": {
          "description": "Forbidden",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "404": {
          "description": "Not Found",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "405": {
          "description": "Method Not allowed",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "409": {
          "description": "Conflict",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "500": {
          "description": "Internal Server Error",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    }
  },
  "/listener/customerRetrieveEvent": {
    "post": {
      "operationId": "listenToCustomerRetrieveEvent",
      "summary": "Client listener for entity CustomerRetrieveEvent",
      "description": "Example of a client listener for receiving the notification CustomerRetrieveEvent",
      "tags": [
        "notification listeners (client side)"
      ],
      "parameters": [
        {
          "schema": {
            "$ref": "#/definitions/CustomerRetrieveEvent"
          },
          "description": "The event data",
          "required": true,
          "name": "data",
          "in": "body"
        }
      ],
      "responses": {
        "201": {
          "description": "Notified",
          "schema": {
            "$ref": "#/definitions/EventSubscription"
          }
        },
        "400": {
          "description": "Bad Request",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "401": {
          "description": "Unauthorized",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "403": {
          "description": "Forbidden",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "404": {
          "description": "Not Found",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "405": {
          "description": "Method Not allowed",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "409": {
          "description": "Conflict",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        },
        "500": {
          "description": "Internal Server Error",
          "schema": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    }
  },
  "definitions": {
    "CustomerHistory": {
      "type": "object",
      "description": "Customer History",
      "properties": {
        "customerId": {
          "type": "string",
          "description": "Unique identifier of the Customer"
        },
        "user": {
          "type": "string",
          "description": "User who made the changes on Customer"
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date time of the change, using IETC-RFC-3339 format"
        },
        "status": {
          "type": "string",
          "description": "Status of customer after changes"
        },
        "statusReason": {
          "type": "string",
          "description": "Status reason of the change"
        },
        "snapshot": {
          "type": "string",
          "description": "Snapshot of customer object after changes"
        }
      }
    },
    "AccountRef": {
      "type": "object",
      "description": "Account reference. A account may be a party account or a financial account.",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "href": {
          "type": "string",
          "description": "Reference of the account"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the account"
        },
        "name": {
          "type": "string",
          "description": "Name of the account"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "AgreementRef": {
      "type": "object",
      "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "Any": {},
    "AttachmentRefOrValue": {
      "type": "object",
      "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for this particular attachment"
        },
        "href": {
          "type": "string",
          "description": "URI for this Attachment"
        },
        "attachmentType": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "content": {
          "type": "string",
          "description": "The actual contents of the attachment object, if embedded, encoded as base64"
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "documentType": {
          "type": "string",
          "description": "The type of the document"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "name": {
          "type": "string",
          "description": "The name of the attachment"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "size": {
          "$ref": "#/definitions/Quantity",
          "description": "The size of the attachment."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period of time for which the attachment is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "format": "uri"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "Characteristic": {
      "type": "object",
      "description": "Describes a given characteristic of an object or entity through a name/value pair.",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "valueType": {
          "type": "string",
          "description": "Data type of the value of the characteristic"
        },
        "value": {
          "$ref": "#/definitions/Any",
          "description": "The value of the characteristic"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "ContactMedium": {
      "type": "object",
      "description": "Indicates the contact medium that could be used to contact the party.",
      "required": [
        "mediumType",
        "characteristic"
      ],
      "properties": {
        "mediumType": {
          "type": "string",
          "description": "Type of the contact medium, such as: email address, telephone number, postal address"
        },
        "preferred": {
          "type": "boolean",
          "description": "If true, indicates that is the preferred contact medium"
        },
        "characteristic": {
          "$ref": "#/definitions/MediumCharacteristic",
          "description": "Any additional characteristic(s) of this contact medium"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The time period that the contact medium is valid for"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "CreditProfile": {
      "type": "object",
      "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
      "required": [
        "creditProfileDate",
        "validFor"
      ],
      "properties": {
        "creditProfileDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the profile was established"
        },
        "creditRiskRating": {
          "type": "integer",
          "description": "This is an integer whose value is used to rate the risk"
        },
        "creditScore": {
          "type": "integer",
          "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the profile is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "id",
        "name",
        "engagedParty"
      ],
      "properties": {
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for Customers"
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the customer."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers."
        },
        "status": {
          "type": "string",
          "description": "Used to track the lifecycle status of the customer."
        },
        "statusReason": {
          "type": "string",
          "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRef"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          },
          "description": "Describes the characteristic of a customer."
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "creditProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditProfile"
          }
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "engagedParty": {
          "$ref": "#/definitions/PartyRef",
          "description": "The party - an organization or an individual - that is engaged as a customer."
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentMethodRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The time period that the Customer is valid for."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "Customer_Create": {
      "type": "object",
      "description": "\nSkipped properties: id,href",
      "required": [
        "engagedParty",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for Customer"
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers."
        },
        "status": {
          "type": "string",
          "description": "Used to track the lifecycle status of the customer."
        },
        "statusReason": {
          "type": "string",
          "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRef"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          },
          "description": "Describes the characteristic of a customer."
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "creditProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditProfile"
          }
        },
        "engagedParty": {
          "$ref": "#/definitions/PartyRef",
          "description": "The party - an organization or an individual - that is engaged as a customer."
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentMethodRef"
          }
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The time period that the Customer is valid for."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "Customer_Update": {
      "type": "object",
      "description": "\nSkipped properties: id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers."
        },
        "status": {
          "type": "string",
          "description": "Used to track the lifecycle status of the customer."
        },
        "statusReason": {
          "type": "string",
          "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRef"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          },
          "description": "Describes the characteristic of a customer."
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "creditProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditProfile"
          }
        },
        "engagedParty": {
          "$ref": "#/definitions/PartyRef",
          "description": "The party - an organization or an individual - that is engaged as a customer."
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentMethodRef"
          }
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The time period that the Customer is valid for."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "EntityRef": {
      "type": "object",
      "description": "Entity reference schema to be use for all entityRef class.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "MediumCharacteristic": {
      "type": "object",
      "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city"
        },
        "contactType": {
          "type": "string",
          "description": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation…"
        },
        "country": {
          "type": "string",
          "description": "The country"
        },
        "emailAddress": {
          "type": "string",
          "description": "Full email address in standard format"
        },
        "faxNumber": {
          "type": "string",
          "description": "The fax number of the contact"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The primary phone number of the contact"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPlaceRef"
          }
        },
        "postCode": {
          "type": "string",
          "description": "Postcode"
        },
        "socialNetworkId": {
          "type": "string",
          "description": "Identifier as a member of a social network"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "State or province"
        },
        "street1": {
          "type": "string",
          "description": "Describes the street"
        },
        "street2": {
          "type": "string",
          "description": "Complementary street description"
        },
        "town": {
          "type": "string",
          "description": "The town. A town is a compactly settled area usually larger than a village but smaller than a city (Turkey: Ilce) e.g. Pendik"
        },
        "locality": {
          "type": "string",
          "description": "Neighborhood, village or other locality. e.g. Gencosman Mah."
        },
        "buildingNumber": {
          "type": "string",
          "description": "The street number of the building. e.g. 25"
        },
        "unitNumber": {
          "type": "string",
          "description": "Number of the interior unit within a building, such as a flat, apartment or office number. e.g. Daire:8"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "PaymentMethodRef": {
      "type": "object",
      "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the payment mean"
        },
        "href": {
          "type": "string",
          "description": "Reference of the payment mean"
        },
        "name": {
          "type": "string",
          "description": "Name of the payment mean"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "Quantity": {
      "type": "object",
      "description": "An amount in a given unit",
      "properties": {
        "amount": {
          "default": 1,
          "type": "number",
          "format": "float",
          "description": "Numeric value in a given unit"
        },
        "units": {
          "type": "string",
          "description": "Unit"
        }
      }
    },
    "RelatedParty": {
      "type": "object",
      "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
      "required": [
        "@referredType",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "RelatedPlaceRef": {
      "type": "object",
      "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRef class itself",
      "required": [
        "role"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "name": {
          "type": "string",
          "description": "Name for the place"
        },
        "role": {
          "type": "string"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "PartyRef": {
      "type": "object",
      "description": "Party reference. A party ref defines the real world party (organization or individual) linked to a specific entity (such as a customer or a party role entity).",
      "required": [
        "@referredType",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a party."
        },
        "href": {
          "type": "string",
          "description": "Reference of the party."
        },
        "name": {
          "type": "string",
          "description": "Name of the party."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "TimePeriod": {
      "type": "object",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
        }
      }
    },
    "EventSubscription": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        }
      }
    },
    "EventSubscriptionInput": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "CustomerCreateEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the resource involved in the event"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource involved in the event"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explanatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/CustomerCreateEventPayload"
        }
      }
    },
    "CustomerCreateEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "customer": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "CustomerAttributeValueChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explanatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "fieldPath": {
          "type": "string",
          "description": "The path identifying the object field concerned by this notification."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/CustomerAttributeValueChangeEventPayload"
        }
      }
    },
    "CustomerAttributeValueChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "customer": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "CustomerStateChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the resource involved in the event"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource involved in the event"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explanatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/CustomerStateChangeEventPayload"
        }
      }
    },
    "CustomerStateChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "customer": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "CustomerDeleteEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the resource involved in the event"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource involved in the event"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explanatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/CustomerDeleteEventPayload"
        }
      }
    },
    "CustomerDeleteEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "customer": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "CustomerListEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "description": "Time of the event occurrence.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "timeOccurred": {
          "type": "string",
          "description": "The time the event occurred.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/CustomerListEventPayload"
        }
      }
    },
    "CustomerListEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "customer": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Customer"
          }
        }
      }
    },
    "CustomerRetrieveEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "description": "Time of the event occurrence.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "timeOccurred": {
          "type": "string",
          "description": "The time the event occurred.",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/CustomerRetrieveEventPayload"
        }
      }
    },
    "CustomerRetrieveEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "customer": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "Error": {
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
      "type": "object",
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Application relevant detail, defined in the API or a common list."
        },
        "reason": {
          "type": "string",
          "description": "Explanation of the reason for the error which can be shown to a client user."
        },
        "message": {
          "type": "string",
          "description": "More details and corrective actions related to the error which can be shown to a client user."
        },
        "status": {
          "type": "string",
          "description": "HTTP Error code extension"
        },
        "referenceError": {
          "type": "string",
          "format": "uri",
          "description": "URI of documentation describing the error."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class."
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name."
        }
      }
    },
    "ExternalReference": {
      "type": "object",
      "description": "External reference of the individual or reference in other system",
      "required": [
        "id",
        "externalReferenceType",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier."
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference."
        },
        "externalReferenceType": {
          "type": "string",
          "description": "Type of the external reference"
        },
        "name": {
          "type": "string",
          "description": "External reference name"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    }
  }
}
