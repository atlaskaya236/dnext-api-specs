{
  "swagger": "2.0",
  "info": {
    "description": "## TMF API Reference: TMF633 - Service Catalog Management\n\n Version 4.0 \n\nThe Service Catalog API is one of Catalog Management API Family.Service Catalog API goal is to provide a catalog of services. \nService Catalog API performs the following operations on the resource :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity (for administration purposes)\n- Manage notification of events.",
    "version": "Version v4 (prepared with Service Catalog Management API REST Specification TMF633 Release 18.5.1)",
    "title": "Orbitant Service Catalog Management API",
    "contact": {
      "name": "PiA(people in action)",
      "url": "http://www.pia-team.com/",
      "email": "info@pia-team.com"
    },
    "license": {
      "name": "PiA License",
      "url": "hhttp://www.pia-team.com"
    }
  },
  "host": "demo.test.orbitant.dev",
  "basePath": "/api/serviceCatalogManagement/v4",
  "tags": [
    {
      "name": "exportJob",
      "description": "the exportJob API"
    },
    {
      "name": "hub",
      "description": "the hub API"
    },
    {
      "name": "importJob",
      "description": "the importJob API"
    },
    {
      "name": "serviceCandidate",
      "description": "the serviceCandidate API"
    },
    {
      "name": "serviceCatalog",
      "description": "the serviceCatalog API"
    },
    {
      "name": "serviceCategory",
      "description": "the serviceCategory API"
    },
    {
      "name": "serviceSpecification",
      "description": "the serviceSpecification API"
    }
  ],
  "paths": {
    "/exportJob": {
      "get": {
        "tags": [
          "exportJob"
        ],
        "summary": "List or find ExportJob objects",
        "description": "This operation list or find ExportJob entities",
        "operationId": "listExportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExportJob"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "exportJob"
        ],
        "summary": "Creates a ExportJob",
        "description": "This operation creates a ExportJob entity.",
        "operationId": "createExportJob",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ExportJob to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportJob_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/exportJob/{id}": {
      "get": {
        "tags": [
          "exportJob"
        ],
        "summary": "Retrieves a ExportJob by ID",
        "description": "This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveExportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ExportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "exportJob"
        ],
        "summary": "Deletes a ExportJob",
        "description": "This operation deletes a ExportJob entity.",
        "operationId": "deleteExportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ExportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub": {
      "post": {
        "tags": [
          "events subscription",
          "hub"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "events subscription",
          "hub"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the registered listener",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/importJob": {
      "get": {
        "tags": [
          "importJob"
        ],
        "summary": "List or find ImportJob objects",
        "description": "This operation list or find ImportJob entities",
        "operationId": "listImportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImportJob"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "importJob"
        ],
        "summary": "Creates a ImportJob",
        "description": "This operation creates a ImportJob entity.",
        "operationId": "createImportJob",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ImportJob to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportJob_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/importJob/{id}": {
      "get": {
        "tags": [
          "importJob"
        ],
        "summary": "Retrieves a ImportJob by ID",
        "description": "This operation retrieves a ImportJob entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveImportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ImportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "importJob"
        ],
        "summary": "Deletes a ImportJob",
        "description": "This operation deletes a ImportJob entity.",
        "operationId": "deleteImportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ImportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceCandidate": {
      "get": {
        "tags": [
          "serviceCandidate"
        ],
        "summary": "List or find ServiceCandidate objects",
        "description": "This operation list or find ServiceCandidate entities",
        "operationId": "listServiceCandidate",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort params of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceCandidate"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "serviceCandidate"
        ],
        "summary": "Creates a ServiceCandidate",
        "description": "This operation creates a ServiceCandidate entity.",
        "operationId": "createServiceCandidate",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServiceCandidate to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceCandidate_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceCandidate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceCandidate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceCandidate/{id}": {
      "get": {
        "tags": [
          "serviceCandidate"
        ],
        "summary": "Retrieves a ServiceCandidate by ID",
        "description": "This operation retrieves a ServiceCandidate entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveServiceCandidate",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceCandidate",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceCandidate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "serviceCandidate"
        ],
        "summary": "Deletes a ServiceCandidate",
        "description": "This operation deletes a ServiceCandidate entity.",
        "operationId": "deleteServiceCandidate",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceCandidate",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "serviceCandidate"
        ],
        "summary": "Updates partially a ServiceCandidate",
        "description": "This operation updates partially a ServiceCandidate entity.",
        "operationId": "patchServiceCandidate_1",
        "consumes": [
          "application/merge-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServiceCandidate to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceCandidate_Update"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceCandidate",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ServiceCandidate"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceCatalog": {
      "get": {
        "tags": [
          "serviceCatalog"
        ],
        "summary": "List or find ServiceCatalog objects",
        "description": "This operation list or find ServiceCatalog entities",
        "operationId": "listServiceCatalog",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceCatalog"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "serviceCatalog"
        ],
        "summary": "Creates a ServiceCatalog",
        "description": "This operation creates a ServiceCatalog entity.",
        "operationId": "createServiceCatalog",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServiceCatalog to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceCatalog_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceCatalog"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceCatalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceCatalog/{id}": {
      "get": {
        "tags": [
          "serviceCatalog"
        ],
        "summary": "Retrieves a ServiceCatalog by ID",
        "description": "This operation retrieves a ServiceCatalog entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveServiceCatalog",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceCatalog",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceCatalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "serviceCatalog"
        ],
        "summary": "Deletes a ServiceCatalog",
        "description": "This operation deletes a ServiceCatalog entity.",
        "operationId": "deleteServiceCatalog",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceCatalog",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "Deleted",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "serviceCatalog"
        ],
        "summary": "Updates partially a ServiceCatalog",
        "description": "This operation updates partially a ServiceCatalog entity.",
        "operationId": "patchServiceCatalog_1",
        "consumes": [
          "application/merge-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServiceCatalog to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceCatalog_Update"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceCatalog",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ServiceCatalog"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceCategory": {
      "get": {
        "tags": [
          "serviceCategory"
        ],
        "summary": "List or find ServiceCategory objects",
        "description": "This operation list or find ServiceCategory entities",
        "operationId": "listServiceCategory",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceCategory"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "serviceCategory"
        ],
        "summary": "Creates a ServiceCategory",
        "description": "This operation creates a ServiceCategory entity.",
        "operationId": "createServiceCategory",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServiceCategory to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceCategory_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceCategory"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceCategory/{id}": {
      "get": {
        "tags": [
          "serviceCategory"
        ],
        "summary": "Retrieves a ServiceCategory by ID",
        "description": "This operation retrieves a ServiceCategory entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveServiceCategory",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceCategory",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "serviceCategory"
        ],
        "summary": "Deletes a ServiceCategory",
        "description": "This operation deletes a ServiceCategory entity.",
        "operationId": "deleteServiceCategory",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceCategory",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "serviceCategory"
        ],
        "summary": "Updates partially a ServiceCategory",
        "description": "This operation updates partially a ServiceCategory entity.",
        "operationId": "patchServiceCategory_1",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceCategory",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "patch",
            "description": "The ServiceCategory to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatch"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ServiceCategory"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceSpecification": {
      "get": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "List or find ServiceSpecification objects",
        "description": "This operation list or find ServiceSpecification entities",
        "operationId": "listServiceSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceSpecification"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "Creates a ServiceSpecification",
        "description": "This operation creates a ServiceSpecification entity.",
        "operationId": "createServiceSpecification",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServiceSpecification to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceSpecification_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceSpecification"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceSpecification/{id}": {
      "get": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "Retrieves a ServiceSpecification by ID",
        "description": "This operation retrieves a ServiceSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveServiceSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceSpecification",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "Deletes a ServiceSpecification",
        "description": "This operation deletes a ServiceSpecification entity.",
        "operationId": "deleteServiceSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceSpecification",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "serviceSpecification"
        ],
        "summary": "Updates partially a ServiceSpecification",
        "description": "This operation updates partially a ServiceSpecification entity.",
        "operationId": "patchServiceSpecification_1",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceSpecification",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "patch",
            "description": "The ServiceSpecification to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatch"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ServiceSpecification"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "Addressable": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        }
      },
      "title": "Addressable",
      "description": "Base schema for adressable entities"
    },
    "AssociationSpecificationRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        }
      },
      "title": "AssociationSpecificationRef",
      "description": "reference to an AssociationSpecification object"
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "attachmentType": {
          "type": "string",
          "example": "video",
          "description": "Attachment type such as video, picture"
        },
        "content": {
          "type": "string",
          "description": "The actual contents of the attachment object, if embedded, encoded as base64"
        },
        "description": {
          "type": "string",
          "example": "Photograph of the Product",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
          "description": "URI for this Attachment"
        },
        "id": {
          "type": "string",
          "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
          "description": "Unique identifier for this particular attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "name": {
          "type": "string",
          "description": "The name of the attachment"
        },
        "size": {
          "description": "The size of the attachment.",
          "$ref": "#/definitions/Quantity"
        },
        "url": {
          "type": "string",
          "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "validFor": {
          "description": "The period of time for which the attachment is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "Attachment",
      "description": "Complements the description of an element (for instance a product) through video, pictures..."
    },
    "AttachmentRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "URL serving as reference for the attachment resource"
        },
        "id": {
          "type": "string",
          "description": "Unique-Identifier for this attachment"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "url": {
          "type": "string",
          "description": "Link to the attachment media/content"
        }
      },
      "title": "AttachmentRef",
      "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures"
    },
    "AttachmentRefOrValue": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "attachmentType": {
          "type": "string",
          "example": "video",
          "description": "Attachment type such as video, picture"
        },
        "content": {
          "type": "string",
          "description": "The actual contents of the attachment object, if embedded, encoded as base64"
        },
        "description": {
          "type": "string",
          "example": "Photograph of the Product",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
          "description": "URI for this Attachment"
        },
        "id": {
          "type": "string",
          "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
          "description": "Unique identifier for this particular attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "name": {
          "type": "string",
          "description": "The name of the attachment"
        },
        "size": {
          "description": "The size of the attachment.",
          "$ref": "#/definitions/Quantity"
        },
        "url": {
          "type": "string",
          "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "validFor": {
          "description": "The period of time for which the attachment is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "AttachmentRefOrValue",
      "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture."
    },
    "BundledEntitySpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the BundledEntitySpecification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the BundledEntitySpecification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the BundledEntitySpecification"
        }
      },
      "title": "BundledEntitySpecification",
      "description": "A type of EntitySpecification that belongs to a grouping of EntitySpecifications made available to the market. It inherits of all attributes of EntitySpecification."
    },
    "BundledFeatureSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the BundledFeatureSpecification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the BundledFeatureSpecification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the BundledFeatureSpecification"
        }
      },
      "title": "BundledFeatureSpecification",
      "description": "A type of FeatureSpecification that belongs to a grouping of FeatureSpecifications made available to the market. It inherits of all attributes of FeatureSpecification."
    },
    "BundledServiceSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the BundledServiceSpecification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the BundledServiceSpecification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the BundledServiceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Version of the bundled specification"
        }
      },
      "title": "BundledServiceSpecification",
      "description": "A type of ServiceSpecification that belongs to a grouping of ServiceSpecifications made available to the market. It inherits of all attributes of ServiceSpecification."
    },
    "CharacteristicSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type."
        },
        "charSpecRelationship": {
          "type": "array",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
          "items": {
            "$ref": "#/definitions/CharacteristicSpecificationRelationship"
          }
        },
        "characteristicValueSpecification": {
          "type": "array",
          "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a CharacteristicSpecification object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding Characteristic object can take on.",
          "items": {
            "$ref": "#/definitions/CharacteristicValueSpecification"
          }
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the target Characteristic is configurable"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains the CharacteristicSpecification."
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
        },
        "id": {
          "type": "string",
          "description": "Unique ID for the characteristic"
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
        },
        "validFor": {
          "description": "The period of time for which a characteristic is applicable.",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        }
      },
      "title": "CharacteristicSpecification",
      "description": "This class defines a characteristic specification."
    },
    "CharacteristicSpecificationBase": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type."
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the target Characteristic is configurable"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains the CharacteristicSpecification."
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
        },
        "id": {
          "type": "string",
          "description": "Unique ID for the characteristic"
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
        },
        "validFor": {
          "description": "The period of time for which a characteristic is applicable.",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        }
      },
      "title": "CharacteristicSpecificationBase",
      "description": "This class defines a characteristic specification."
    },
    "CharacteristicSpecificationRelationship": {
      "type": "object",
      "properties": {
        "characteristicSpecificationId": {
          "type": "string",
          "description": "Unique identifier of the characteristic within the specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the target characteristic within the specification"
        },
        "parentSpecificationHref": {
          "type": "string",
          "description": "Hyperlink reference to the parent specification containing the target characteristic"
        },
        "parentSpecificationId": {
          "type": "string",
          "description": "Unique identifier of the parent specification containing the target characteristic"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
        },
        "validFor": {
          "description": "The period for which the object is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "CharacteristicSpecificationRelationship",
      "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID."
    },
    "CharacteristicValueSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "isDefault": {
          "type": "boolean",
          "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
        },
        "rangeInterval": {
          "type": "string",
          "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
        },
        "regex": {
          "type": "string",
          "description": "A regular expression constraint for given value"
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
        },
        "validFor": {
          "description": "The period of time for which a value is applicable.",
          "$ref": "#/definitions/TimePeriod"
        },
        "value": {
          "type": "string",
          "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
        },
        "valueFrom": {
          "type": "integer",
          "format": "int32",
          "description": "The low range value that a characteristic can take on"
        },
        "valueTo": {
          "type": "integer",
          "format": "int32",
          "description": "The upper range value that a characteristic can take on"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
        }
      },
      "title": "CharacteristicValueSpecification",
      "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic."
    },
    "ConstraintRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "constraint version"
        }
      },
      "title": "ConstraintRef",
      "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec."
    },
    "EntityRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        }
      },
      "title": "EntityRef",
      "description": "Entity reference schema to be use for all entityRef class."
    },
    "EntitySpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "attachment": {
          "type": "array",
          "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledEntitySpecification": {
          "type": "array",
          "description": "Bundled entity specification",
          "items": {
            "$ref": "#/definitions/BundledEntitySpecification"
          }
        },
        "constraint": {
          "type": "array",
          "description": "This is a list of constraint references applied to this specification",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the specification"
        },
        "entitySpecRelationship": {
          "type": "array",
          "description": "Relationship to another specification",
          "items": {
            "$ref": "#/definitions/EntitySpecificationRelationship"
          }
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of the specification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        },
        "name": {
          "type": "string",
          "description": "Name given to the specification"
        },
        "relatedParty": {
          "type": "array",
          "description": "Parties who manage or otherwise have an interest in this specification",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "specCharacteristic": {
          "type": "array",
          "description": "List of characteristics that the entity can take",
          "items": {
            "$ref": "#/definitions/CharacteristicSpecification"
          }
        },
        "targetEntitySchema": {
          "description": "Pointer to a schema that defines the target entity",
          "$ref": "#/definitions/TargetEntitySchema"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "specification version"
        }
      },
      "title": "EntitySpecification",
      "description": "EntitySpecification is a class that offers characteristics to describe a type of entity. Entities are generic constructs that may be used to describe bespoke business entities that are not effectively covered by the existing SID model. Functionally, the entity specification acts as a template by which entities may be instantiated and described. By sharing the same specification, these entities would therefore share the same set of characteristics. Note: The ‘configurable’ attribute on the specCharacteristics determines if an entity instantiated from the entity specification can override the value of the attribute. When set to false, the entity instance may not define a value that differs from the value in the specification."
    },
    "EntitySpecificationRelationship": {
      "type": "object",
      "required": [
        "relationshipType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "associationSpec": {
          "description": "A specification for an association used by this relationship",
          "$ref": "#/definitions/AssociationSpecificationRef"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
        },
        "role": {
          "type": "string",
          "description": "The association role for this entity specification"
        },
        "validFor": {
          "description": "The period for which the entitySpecRelationship is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        }
      },
      "title": "EntitySpecificationRelationship",
      "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications."
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name."
        },
        "code": {
          "type": "string",
          "description": "Application relevant detail, defined in the API or a common list."
        },
        "message": {
          "type": "string",
          "description": "More details and corrective actions related to the error which can be shown to a client user."
        },
        "reason": {
          "type": "string",
          "description": "Explanation of the reason for the error which can be shown to a client user."
        },
        "referenceError": {
          "type": "string",
          "description": "URI of documentation describing the error."
        },
        "status": {
          "type": "string",
          "description": "HTTP Error code extension"
        }
      },
      "title": "Error",
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
    },
    "EventSubscription": {
      "type": "object",
      "required": [
        "callback",
        "id"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        }
      },
      "title": "EventSubscription",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "EventSubscriptionInput": {
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      },
      "title": "EventSubscriptionInput",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "ExportJob": {
      "type": "object",
      "properties": {
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        },
        "href": {
          "type": "string",
          "description": "Reference of the export job"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the export job"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        }
      },
      "title": "ExportJob",
      "description": "Represents a task used to export resources to a file"
    },
    "ExportJob_Create": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        }
      },
      "title": "ExportJob_Create",
      "description": "Represents a task used to export resources to a file Skipped properties: id,href"
    },
    "Extensible": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      },
      "title": "Extensible",
      "description": "Base Extensible schema for use in TMForum Open-APIs"
    },
    "FeatureSpecification": {
      "type": "object",
      "properties": {
        "bundledFeatureSpecification": {
          "type": "array",
          "description": "Bundled feature specification",
          "items": {
            "$ref": "#/definitions/BundledFeatureSpecification"
          }
        },
        "constraint": {
          "type": "array",
          "description": "This is a list of feature constraints",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "featureSpecCharacteristic": {
          "type": "array",
          "description": "This is a list of characteristics for a particular feature",
          "items": {
            "$ref": "#/definitions/FeatureSpecificationCharacteristic"
          }
        },
        "featureSpecRelationship": {
          "type": "array",
          "description": "A dependency, exclusivity or aggratation relationship between/among feature specifications.",
          "items": {
            "$ref": "#/definitions/FeatureSpecificationRelationship"
          }
        },
        "id": {
          "type": "string",
          "description": "Identifier of the feature specification. Must be locally unique within the containing specification, thus allowing direct access to the feature spec."
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this is a feature group (true) or not (false)"
        },
        "isEnabled": {
          "type": "boolean",
          "description": "A flag indicating if the feature is enabled (true) or not (false)"
        },
        "name": {
          "type": "string",
          "description": "Unique name given to the feature specification"
        },
        "validFor": {
          "description": "The period for which this feature specification is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Version of the feature specification"
        }
      },
      "title": "FeatureSpecification",
      "description": "Specification for resource, service or product features"
    },
    "FeatureSpecificationCharacteristic": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type."
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the target Characteristic is configurable"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains the CharacteristicSpecification."
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
        },
        "featureSpecCharRelationship": {
          "type": "array",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among feature characteristics.",
          "items": {
            "$ref": "#/definitions/FeatureSpecificationCharacteristicRelationship"
          }
        },
        "featureSpecCharacteristicValue": {
          "type": "array",
          "description": "Used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a FeatureCharacteristic object.",
          "items": {
            "$ref": "#/definitions/CharacteristicValueSpecification"
          }
        },
        "id": {
          "type": "string",
          "description": "Unique ID for the characteristic"
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
        },
        "validFor": {
          "description": "The period of time for which a characteristic is applicable.",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        }
      },
      "title": "FeatureSpecificationCharacteristic",
      "description": "Configuration feature characteristic specification."
    },
    "FeatureSpecificationCharacteristicRelationship": {
      "type": "object",
      "properties": {
        "characteristicId": {
          "type": "string",
          "description": "Unique identifier of the characteristic within the the target feature specification"
        },
        "featureId": {
          "type": "string",
          "description": "Unique identifier of the target feature specification within the resource specification."
        },
        "name": {
          "type": "string",
          "description": "Name of the target characteristic"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
        },
        "resourceSpecificationHref": {
          "type": "string",
          "description": "Hyperlink reference to the resource specification containing the target feature and feature characteristic"
        },
        "resourceSpecificationId": {
          "type": "string",
          "description": "Unique identifier of the resource specification containing the target feature and feature characteristic"
        },
        "validFor": {
          "description": "The period for which the object is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "FeatureSpecificationCharacteristicRelationship",
      "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among FeatureSpecificationCharacteristics."
    },
    "FeatureSpecificationRelationship": {
      "type": "object",
      "required": [
        "name",
        "relationshipType"
      ],
      "properties": {
        "featureId": {
          "type": "string",
          "description": "Unique identifier of the target feature specification."
        },
        "name": {
          "type": "string",
          "description": "This is the name of the target feature specification."
        },
        "parentSpecificationHref": {
          "type": "string",
          "description": "Hyperlink reference to the parent specification containing the target feature"
        },
        "parentSpecificationId": {
          "type": "string",
          "description": "Unique identifier of the parent specification containing the target feature"
        },
        "relationshipType": {
          "type": "string",
          "description": "This is the type of the feature specification relationship."
        },
        "validFor": {
          "description": "The period for which this feature spoecification relationship is valid.",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "FeatureSpecificationRelationship",
      "description": "Relationship between feature specifications"
    },
    "FulfillmentSpecification": {
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "description": "Add FulfillmentSpecification."
        },
        "delete": {
          "type": "string",
          "description": "Delete FulfillmentSpecification."
        },
        "modify": {
          "type": "string",
          "description": "Modify FulfillmentSpecification."
        }
      },
      "title": "FulfillmentSpecification"
    },
    "FulfillmentSpecificationOperation": {
      "type": "object",
      "properties": {
        "cancelFlow": {
          "type": "string",
          "description": "Cancel Flow FulfillmentSpecification."
        },
        "operationType": {
          "type": "string",
          "description": "Fulfillment Specification Operation Type."
        },
        "postFlow": {
          "type": "string",
          "description": "Post Flow FulfillmentSpecification."
        },
        "preFlow": {
          "type": "string",
          "description": "Pre Flow FulfillmentSpecification."
        },
        "relatedSpecifications": {
          "type": "array",
          "description": "Relation definition between product specifications.",
          "items": {
            "$ref": "#/definitions/RelatedSpecification"
          }
        }
      },
      "title": "FulfillmentSpecificationOperation"
    },
    "ImportJob": {
      "type": "object",
      "properties": {
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        },
        "href": {
          "type": "string",
          "description": "Reference of the import job"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the import job"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        }
      },
      "title": "ImportJob",
      "description": "Represents a task used to import resources from a file"
    },
    "ImportJob_Create": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the account"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        }
      },
      "title": "ImportJob_Create",
      "description": "Represents a task used to import resources from a file Skipped properties: id,href"
    },
    "JsonPatch": {
      "type": "object",
      "title": "JsonPatch"
    },
    "Quantity": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Numeric value in a given unit"
        },
        "units": {
          "type": "string",
          "description": "Unit"
        }
      },
      "title": "Quantity",
      "description": "An amount in a given unit"
    },
    "RelatedParty": {
      "type": "object",
      "required": [
        "@referredType",
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        }
      },
      "title": "RelatedParty",
      "description": "Related Entity reference. A related party defines party or party role linked to a specific entity."
    },
    "RelatedSpecification": {
      "type": "object",
      "required": [
        "relation",
        "specification"
      ],
      "properties": {
        "relation": {
          "type": "string",
          "description": "Relation definition between Product Specification."
        },
        "specification": {
          "description": "Related Service Specification.",
          "$ref": "#/definitions/ServiceSpecificationRef"
        }
      },
      "title": "RelatedSpecification"
    },
    "ResourceSpecificationRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        }
      },
      "title": "ResourceSpecificationRef",
      "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components. A ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification."
    },
    "ServiceCandidate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "category": {
          "type": "array",
          "description": "List of categories for this candidate",
          "items": {
            "$ref": "#/definitions/ServiceCategoryRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "URL serving as reference for the entity"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service candidate."
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "serviceSpecification": {
          "description": "The service specification implied by this candidate",
          "$ref": "#/definitions/ServiceSpecificationRef"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceCandidate",
      "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A ServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications."
    },
    "ServiceCandidateRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Version of the service candidate"
        }
      },
      "title": "ServiceCandidateRef",
      "description": "ServiceCandidate reference. ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog."
    },
    "ServiceCandidate_Create": {
      "type": "object",
      "required": [
        "name",
        "serviceSpecification"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "category": {
          "type": "array",
          "description": "List of categories for this candidate",
          "items": {
            "$ref": "#/definitions/ServiceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service candidate."
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "serviceSpecification": {
          "description": "The service specification implied by this candidate",
          "$ref": "#/definitions/ServiceSpecificationRef"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceCandidate_Create",
      "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A ServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications. Skipped properties: id,href"
    },
    "ServiceCandidate_Update": {
      "type": "object",
      "properties": {
        "category": {
          "type": "array",
          "description": "List of categories for this candidate",
          "items": {
            "$ref": "#/definitions/ServiceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the service candidate."
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "serviceSpecification": {
          "description": "The service specification implied by this candidate",
          "$ref": "#/definitions/ServiceSpecificationRef"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "the version of service candidate"
        }
      },
      "title": "ServiceCandidate_Update",
      "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A ServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications. Skipped properties: id,href,lastUpdate"
    },
    "ServiceCatalog": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "category": {
          "type": "array",
          "description": "List of service categories associated with this catalog",
          "items": {
            "$ref": "#/definitions/ServiceCategoryRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "URL serving as reference for the entity"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties or party roles related to this category",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the service catalog is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceCatalog",
      "description": "The root entity for service catalog management. A service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).  A service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog. A ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none."
    },
    "ServiceCatalog_Create": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "catalogType": {
          "type": "string",
          "description": "Identifier of the type of catalog"
        },
        "category": {
          "type": "array",
          "description": "List of service categories associated with this catalog",
          "items": {
            "$ref": "#/definitions/ServiceCategoryRef"
          }
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the service catalog"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties or party roles related to this category",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "validFor": {
          "description": "The period for which the service catalog is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceCatalog_Create",
      "description": "The root entity for service catalog management. A service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).  A service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog. A ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none. Skipped properties: id,href"
    },
    "ServiceCatalog_Update": {
      "type": "object",
      "properties": {
        "catalogType": {
          "type": "string",
          "description": "Identifier of the type of catalog"
        },
        "category": {
          "type": "array",
          "description": "List of service categories associated with this catalog",
          "items": {
            "$ref": "#/definitions/ServiceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the service catalog"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties or party roles related to this category",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "validFor": {
          "description": "The period for which the service catalog is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "ServiceCatalog version"
        }
      },
      "title": "ServiceCatalog_Update",
      "description": "The root entity for service catalog management. A service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).  A service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog. A ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none. Skipped properties: id,href,lastUpdate"
    },
    "ServiceCategory": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "category": {
          "type": "array",
          "description": "List of child categories in the tree for in this category",
          "items": {
            "$ref": "#/definitions/ServiceCategoryRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "href": {
          "type": "string",
          "description": "URL serving as reference for the entity"
        },
        "id": {
          "type": "string"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "parent": {
          "description": "Version of the parent category",
          "$ref": "#/definitions/ServiceCategoryRef"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "serviceCandidate": {
          "type": "array",
          "description": "List of service candidates associated with this category",
          "items": {
            "$ref": "#/definitions/ServiceCandidateRef"
          }
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the category is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceCategory",
      "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories."
    },
    "ServiceCategoryRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Category version"
        }
      },
      "title": "ServiceCategoryRef",
      "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories."
    },
    "ServiceCategory_Create": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "category": {
          "type": "array",
          "description": "List of child categories in the tree for in this category",
          "items": {
            "$ref": "#/definitions/ServiceCategoryRef"
          }
        },
        "id": {
          "type": "string"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "parent": {
          "description": "Version of the parent category",
          "$ref": "#/definitions/ServiceCategoryRef"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "serviceCandidate": {
          "type": "array",
          "description": "List of service candidates associated with this category",
          "items": {
            "$ref": "#/definitions/ServiceCandidateRef"
          }
        },
        "validFor": {
          "description": "The period for which the category is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceCategory_Create",
      "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories. Skipped properties: id,href"
    },
    "ServiceCategory_Update": {
      "type": "object",
      "properties": {
        "category": {
          "type": "array",
          "description": "List of child categories in the tree for in this category",
          "items": {
            "$ref": "#/definitions/ServiceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "parent": {
          "description": "Version of the parent category",
          "$ref": "#/definitions/ServiceCategoryRef"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "serviceCandidate": {
          "type": "array",
          "description": "List of service candidates associated with this category",
          "items": {
            "$ref": "#/definitions/ServiceCandidateRef"
          }
        },
        "validFor": {
          "description": "The period for which the category is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "ServiceCategory version"
        }
      },
      "title": "ServiceCategory_Update",
      "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories. Skipped properties: id,href,lastUpdate"
    },
    "ServiceLevelSpecificationRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        }
      },
      "title": "ServiceLevelSpecificationRef",
      "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level  Objectives. In addition, certain consequences are associated with not meeting the Service Level  Objectives. Service Level Agreements are expressed in terms of Service Level Specifications."
    },
    "ServiceSpecRelationship": {
      "type": "object",
      "required": [
        "relationshipType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as dependency, substitution or exclusivity"
        },
        "role": {
          "type": "string",
          "description": "The association role for this service specification"
        },
        "validFor": {
          "description": "The period for which the serviceSpecRelationship is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        }
      },
      "title": "ServiceSpecRelationship",
      "description": "A dependency, substitution or exclusivity relationship between/among service specifications."
    },
    "ServiceSpecification": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "attachment": {
          "type": "array",
          "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledServiceSpecification": {
          "type": "array",
          "description": "A type of ServiceSpecification that belongs to a grouping of ServiceSpecifications made available to the market. It inherits of all attributes of ServiceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledServiceSpecification"
          }
        },
        "constraint": {
          "type": "array",
          "description": "This is a list of constraint references applied to this specification",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "entitySpecRelationship": {
          "type": "array",
          "description": "Relationship to another specification",
          "items": {
            "$ref": "#/definitions/EntitySpecificationRelationship"
          }
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "href": {
          "type": "string",
          "description": "URL serving as reference for the entity"
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of the specification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "pExtension": {
          "description": "ServiceSpecification model has been extended.",
          "$ref": "#/definitions/ServiceSpecificationExtension"
        },
        "relatedParty": {
          "type": "array",
          "description": "Parties who manage or otherwise have an interest in this specification",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS).",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRef"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "serviceLevelSpecification": {
          "type": "array",
          "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum",
          "items": {
            "$ref": "#/definitions/ServiceLevelSpecificationRef"
          }
        },
        "serviceSpecRelationship": {
          "type": "array",
          "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship",
          "items": {
            "$ref": "#/definitions/ServiceSpecRelationship"
          }
        },
        "specCharacteristic": {
          "type": "array",
          "description": "List of characteristics that the entity can take",
          "items": {
            "$ref": "#/definitions/CharacteristicSpecification"
          }
        },
        "targetEntitySchema": {
          "description": "Pointer to a schema that defines the target entity",
          "$ref": "#/definitions/TargetEntitySchema"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceSpecification",
      "description": "ServiceSpecification is a class that offers characteristics to describe a type of service. Functionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics."
    },
    "ServiceSpecificationExtension": {
      "type": "object",
      "properties": {
        "createInventoryItem": {
          "type": "boolean",
          "description": "createInventoryItem."
        },
        "fulfillmentSpecification": {
          "description": "FulfillmentSpecification.",
          "$ref": "#/definitions/FulfillmentSpecification"
        },
        "fulfillmentSpecificationOperation": {
          "type": "array",
          "description": "fulfillmentSpecificationOperation.",
          "items": {
            "$ref": "#/definitions/FulfillmentSpecificationOperation"
          }
        }
      },
      "title": "ServiceSpecificationExtension"
    },
    "ServiceSpecificationRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string"
        },
        "@referredType": {
          "type": "string"
        },
        "@schemaLocation": {
          "type": "string"
        },
        "@type": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceSpecificationRef"
    },
    "ServiceSpecification_Create": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "attachment": {
          "type": "array",
          "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledServiceSpecification": {
          "type": "array",
          "description": "A type of ServiceSpecification that belongs to a grouping of ServiceSpecifications made available to the market. It inherits of all attributes of ServiceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledServiceSpecification"
          }
        },
        "constraint": {
          "type": "array",
          "description": "This is a list of constraint references applied to this specification",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "entitySpecRelationship": {
          "type": "array",
          "description": "Relationship to another specification",
          "items": {
            "$ref": "#/definitions/EntitySpecificationRelationship"
          }
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of the specification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        },
        "name": {
          "type": "string",
          "description": "Name given to the specification"
        },
        "pExtension": {
          "description": "ResourceSpecification model has been extended.",
          "$ref": "#/definitions/ServiceSpecificationExtension"
        },
        "relatedParty": {
          "type": "array",
          "description": "Parties who manage or otherwise have an interest in this specification",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS).",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRef"
          }
        },
        "serviceLevelSpecification": {
          "type": "array",
          "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum",
          "items": {
            "$ref": "#/definitions/ServiceLevelSpecificationRef"
          }
        },
        "serviceSpecRelationship": {
          "type": "array",
          "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship",
          "items": {
            "$ref": "#/definitions/ServiceSpecRelationship"
          }
        },
        "specCharacteristic": {
          "type": "array",
          "description": "List of characteristics that the entity can take",
          "items": {
            "$ref": "#/definitions/CharacteristicSpecification"
          }
        },
        "targetEntitySchema": {
          "description": "Pointer to a schema that defines the target entity",
          "$ref": "#/definitions/TargetEntitySchema"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceSpecification_Create",
      "description": "ServiceSpecification is a class that offers characteristics to describe a type of service. Functionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics. Skipped properties: id,href"
    },
    "ServiceSpecification_Update": {
      "type": "object",
      "properties": {
        "attachment": {
          "type": "array",
          "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledServiceSpecification": {
          "type": "array",
          "description": "A type of ServiceSpecification that belongs to a grouping of ServiceSpecifications made available to the market. It inherits of all attributes of ServiceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledServiceSpecification"
          }
        },
        "constraint": {
          "type": "array",
          "description": "This is a list of constraint references applied to this specification",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the specification"
        },
        "entitySpecRelationship": {
          "type": "array",
          "description": "Relationship to another specification",
          "items": {
            "$ref": "#/definitions/EntitySpecificationRelationship"
          }
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of this catalog item"
        },
        "name": {
          "type": "string",
          "description": "Name given to the specification"
        },
        "pExtension": {
          "description": "ResourceSpecification model has been extended.",
          "$ref": "#/definitions/ServiceSpecificationExtension"
        },
        "relatedParty": {
          "type": "array",
          "description": "Parties who manage or otherwise have an interest in this specification",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS).",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRef"
          }
        },
        "serviceLevelSpecification": {
          "type": "array",
          "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum",
          "items": {
            "$ref": "#/definitions/ServiceLevelSpecificationRef"
          }
        },
        "serviceSpecRelationship": {
          "type": "array",
          "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship",
          "items": {
            "$ref": "#/definitions/ServiceSpecRelationship"
          }
        },
        "specCharacteristic": {
          "type": "array",
          "description": "List of characteristics that the entity can take",
          "items": {
            "$ref": "#/definitions/CharacteristicSpecification"
          }
        },
        "targetEntitySchema": {
          "description": "Pointer to a schema that defines the target entity",
          "$ref": "#/definitions/TargetEntitySchema"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "specification version"
        }
      },
      "title": "ServiceSpecification_Update",
      "description": "ServiceSpecification is a class that offers characteristics to describe a type of service. Functionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics. Skipped properties: id,href,lastUpdate"
    },
    "TargetEntitySchema": {
      "type": "object",
      "required": [
        "@schemaLocation",
        "@type"
      ],
      "properties": {
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target entity"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the target entity"
        }
      },
      "title": "TargetEntitySchema",
      "description": "The reference object to the schema and type of target entity which is described by a specification"
    },
    "TimePeriod": {
      "type": "object",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start of the time period, using IETC-RFC-3339 format"
        }
      },
      "title": "TimePeriod",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
    }
  }
}