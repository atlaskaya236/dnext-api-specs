{
  "swagger": "2.0",
  "info": {
    "description": "The Trouble Ticket API\nCamunda URL Example: https://dnext.dev.orbitant.dev/api/troubleTicketManagement/v4/camunda/app/welcome/default/#!/login",
    "version": "4.0.0",
    "title": "Trouble Ticket",
    "contact": {},
    "license": {
      "name": "PiA License",
      "url": "hhttp://www.pia-team.com"
    }
  },
  "host": "demo.test.orbitant.dev",
  "basePath": "/api/troubleTicketManagement/v4",
  "tags": [
    {
      "name": "faveo-event-api-controller",
      "description": "the faveoEvent API"
    },
    {
      "name": "faveoEvent"
    },
    {
      "name": "hub"
    },
    {
      "name": "hub-api-controller",
      "description": "the hub API"
    },
    {
      "name": "trouble-ticket-api-controller",
      "description": "the troubleTicket API"
    },
    {
      "name": "trouble-ticket-specification-api-controller",
      "description": "the troubleTicketSpecification API"
    },
    {
      "name": "troubleTicket"
    },
    {
      "name": "troubleTicketSpecification"
    }
  ],
  "paths": {
    "/faveoEvent": {
      "post": {
        "tags": [
          "faveoEvent"
        ],
        "summary": "Triggers a Camunda flow",
        "description": "This operation triggers a Camunda flow out of a Faveo event.",
        "operationId": "processFaveoEvent",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/hub": {
      "post": {
        "tags": [
          "events subscription"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "events subscription"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the registered listener",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/troubleTicket": {
      "get": {
        "tags": [
          "troubleTicket"
        ],
        "summary": "List or find TroubleTicket objects",
        "description": "This operation list or find TroubleTicket entities",
        "operationId": "listTroubleTicket",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested page of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TroubleTicket"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "troubleTicket"
        ],
        "summary": "Creates a TroubleTicket",
        "description": "This operation creates a TroubleTicket entity.",
        "operationId": "createTroubleTicket",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "troubleTicket",
            "description": "The TroubleTicket to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TroubleTicketCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TroubleTicket"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TroubleTicket"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/troubleTicket/{id}": {
      "get": {
        "tags": [
          "troubleTicket"
        ],
        "summary": "Retrieves a TroubleTicket by ID",
        "description": "This operation retrieves a TroubleTicket entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveTroubleTicket",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the TroubleTicket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TroubleTicket"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "troubleTicket"
        ],
        "summary": "Deletes a TroubleTicket",
        "description": "This operation deletes a TroubleTicket entity.",
        "operationId": "deleteTroubleTicket",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the TroubleTicket",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "troubleTicket"
        ],
        "summary": "Updates partially a TroubleTicket",
        "description": "This operation updates partially a TroubleTicket entity.",
        "operationId": "patchTroubleTicket",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the TroubleTicket",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "troubleTicket",
            "description": "The TroubleTicket to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TroubleTicketUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/TroubleTicket"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/troubleTicketSpecification": {
      "get": {
        "tags": [
          "troubleTicketSpecification"
        ],
        "summary": "List or find TroubleTicketSpecification objects",
        "description": "This operation lists or finds TroubleTicketSpecification entities",
        "operationId": "listroubleTicketSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TroubleTicketSpecification"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/troubleTicketSpecification/{id}": {
      "get": {
        "tags": [
          "troubleTicketSpecification"
        ],
        "summary": "Retrieves a trouble ticket specification by ID",
        "description": "This operation retrieves a TroubleTicketSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveTroubleTicketSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the TroubleTicketSpecification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TroubleTicketSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AttachmentRefOrValue": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachmentType": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "content": {
          "type": "string",
          "description": "The actual contents of the attachment object, if embedded, encoded as base64"
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "URI for this Attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this particular attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "name": {
          "type": "string",
          "description": "The name of the attachment"
        },
        "size": {
          "description": "The size of the attachment.",
          "$ref": "#/definitions/Quantity"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "validFor": {
          "description": "The period of time for which the attachment is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "AttachmentRefOrValue",
      "description": "An attachment by value or by reference. For AttachmentRefOrValue, the attribute type,schemaLocation and referredType are related to the contained entity and not to AttchmentRefOrValue itself"
    },
    "ChannelRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the channel."
        }
      },
      "title": "ChannelRef",
      "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc.."
    },
    "CustomFieldValuePair": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the custom field"
        },
        "value": {
          "type": "array",
          "description": "Array of values (defined as array to support multiple values in case of fields of type checkbox)",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CustomFieldValuePair",
      "description": "Consists of a field id and gield value pair"
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name."
        },
        "code": {
          "type": "string",
          "description": "Application relevant detail, defined in the API or a common list."
        },
        "message": {
          "type": "string",
          "description": "More details and corrective actions related to the error which can be shown to a client user."
        },
        "reason": {
          "type": "string",
          "description": "Explanation of the reason for the error which can be shown to a client user."
        },
        "referenceError": {
          "type": "string",
          "description": "URI of documentation describing the error."
        },
        "status": {
          "type": "string",
          "description": "HTTP Error code extension"
        }
      },
      "title": "Error",
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
    },
    "EventSubscription": {
      "type": "object",
      "required": [
        "callback",
        "id"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      },
      "title": "EventSubscription",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "EventSubscriptionInput": {
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      },
      "title": "EventSubscriptionInput",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "Label": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "language": {
          "type": "string",
          "description": "Language the label is written in"
        }
      },
      "title": "Label",
      "description": "Label in a particular language"
    },
    "Node": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of custom field"
        },
        "labels_for_form_field": {
          "type": "array",
          "description": "Labels defined for the custom field in different languages",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "options": {
          "type": "array",
          "description": "Values defied for certain custom fields (of types Select, Checkbox and Radiobutton)",
          "items": {
            "$ref": "#/definitions/Option"
          }
        },
        "required_for_agent": {
          "type": "boolean",
          "description": "Shows if wield is mandatory"
        },
        "type": {
          "type": "string",
          "description": "Type of custom field"
        }
      },
      "title": "Node",
      "description": "Node corresponds to a custom field"
    },
    "Note": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "author": {
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the note within its containing entity (may or may not be globally unique, depending on provider implementation)"
        },
        "text": {
          "type": "string",
          "description": "Text of the note"
        }
      },
      "title": "Note",
      "description": "Extra information about a given entity"
    },
    "Option": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "description": "Labels defined for the option in different languages",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "nodes": {
          "type": "array",
          "description": "List of custom fields defined for the custom field value",
          "items": {
            "$ref": "#/definitions/Node"
          }
        }
      },
      "title": "Option",
      "description": "A particular value defined for a custom field (of types Select, Checkbox and Radiobutton)"
    },
    "PExtension": {
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "string",
          "description": "Agent who created the ticket in DNext"
        },
        "customFieldValuePair": {
          "type": "array",
          "description": "List of custom fields defined for the helptopic",
          "items": {
            "$ref": "#/definitions/CustomFieldValuePair"
          }
        },
        "dnextContextUrl": {
          "type": "string",
          "description": "Context URL of the ticket in DNext"
        },
        "faveoContextUrl": {
          "type": "string",
          "description": "Context URL of the ticket in Faveo"
        },
        "slaPlan": {
          "type": "string",
          "description": "SLA plan of the ticket in Faveo"
        }
      },
      "title": "PExtension",
      "description": "Extension for custom fields defined for ticket types (helptopic) and Faveo context URL"
    },
    "Quantity": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Numeric value in a given unit"
        },
        "units": {
          "type": "string",
          "description": "Unit"
        }
      },
      "title": "Quantity",
      "description": "An amount in a given unit"
    },
    "RelatedEntity": {
      "type": "object",
      "required": [
        "@referredType",
        "id",
        "role"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "The role of an entity."
        }
      },
      "title": "RelatedEntity",
      "description": "A reference to an entity, where the type of the entity is not known in advance."
    },
    "RelatedParty": {
      "type": "object",
      "required": [
        "@referredType",
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        }
      },
      "title": "RelatedParty",
      "description": "Related Entity reference. A related party defines party or party role linked to a specific entity."
    },
    "StatusChange": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "changeDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the status changed."
        },
        "changeReason": {
          "type": "string",
          "description": "The reason why the status changed."
        },
        "status": {
          "type": "string",
          "description": "The status of the trouble ticket"
        }
      },
      "title": "StatusChange",
      "description": "Holds the status notification reasons and associated date the status changed, populated by the server"
    },
    "TimePeriod": {
      "type": "object",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
        }
      },
      "title": "TimePeriod",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
    },
    "TroubleTicket": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "channel": {
          "description": "The channel that origin the trouble ticket",
          "$ref": "#/definitions/ChannelRef"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which the trouble ticket was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the trouble or issue"
        },
        "expectedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The expected resolution date determined by the trouble ticket system"
        },
        "externalId": {
          "type": "string",
          "description": "Additional identifier coming from an external system"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink, a reference to the trouble ticket entity"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the trouble ticket"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time that the trouble ticked was last updated"
        },
        "name": {
          "type": "string",
          "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket"
        },
        "note": {
          "type": "array",
          "description": "The note(s) that are associated to the ticket.",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "pExtension": {
          "description": "Extension for custom fields defined under helptopics (ticket types) and context URLs",
          "$ref": "#/definitions/PExtension"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc..."
        },
        "relatedEntity": {
          "type": "array",
          "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated.",
          "items": {
            "$ref": "#/definitions/RelatedEntity"
          }
        },
        "relatedParty": {
          "type": "array",
          "description": "The related party(ies) that are associated to the ticket.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "requestedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The resolution date requested by the user"
        },
        "resolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the trouble ticket was resolved"
        },
        "severity": {
          "type": "string",
          "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc..  Severity values can be for example : Critical, Major, Minor"
        },
        "status": {
          "type": "string",
          "description": "The current status of the trouble ticket",
          "enum": [
            "Open",
            "In Progress",
            "Stalled",
            "Resolved",
            "Closed",
            "Deleted",
            "Merged",
            "Spam",
            "Unapproved",
            "Failed",
            "Cancelled"
          ]
        },
        "statusChange": {
          "type": "array",
          "description": "The status change history that are associated to the ticket.Populated by the server",
          "items": {
            "$ref": "#/definitions/StatusChange"
          }
        },
        "statusChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the status changed."
        },
        "statusChangeReason": {
          "type": "string",
          "description": "The reason for changing the status"
        },
        "ticketType": {
          "type": "string",
          "description": "represent a business type of the trouble ticket e.g. incident, complain, request"
        },
        "troubleTicketRelationship": {
          "type": "array",
          "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets",
          "items": {
            "$ref": "#/definitions/TroubleTicketRelationship"
          }
        }
      },
      "title": "TroubleTicket",
      "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system"
    },
    "TroubleTicketCreate": {
      "type": "object",
      "required": [
        "description",
        "severity",
        "ticketType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "channel": {
          "description": "The channel that origin the trouble ticket",
          "$ref": "#/definitions/ChannelRef"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which the trouble ticket was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the trouble or issue"
        },
        "expectedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The expected resolution date determined by the trouble ticket system"
        },
        "externalId": {
          "type": "string",
          "description": "Additional identifier coming from an external system"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time that the trouble ticked was last updated"
        },
        "name": {
          "type": "string",
          "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket"
        },
        "note": {
          "type": "array",
          "description": "The note(s) that are associated to the ticket.",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "pExtension": {
          "description": "Extension for custom fields defined under helptopics (ticket types) and context URLs",
          "$ref": "#/definitions/PExtension"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc..."
        },
        "relatedEntity": {
          "type": "array",
          "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated.",
          "items": {
            "$ref": "#/definitions/RelatedEntity"
          }
        },
        "relatedParty": {
          "type": "array",
          "description": "The related party(ies) that are associated to the ticket.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "requestedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The resolution date requested by the user"
        },
        "resolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the trouble ticket was resolved"
        },
        "severity": {
          "type": "string",
          "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc..  Severity values can be for example : Critical, Major, Minor"
        },
        "status": {
          "type": "string",
          "description": "The current status of the trouble ticket",
          "enum": [
            "Open",
            "In Progress",
            "Stalled",
            "Resolved",
            "Closed",
            "Deleted",
            "Merged",
            "Spam",
            "Unapproved",
            "Failed",
            "Cancelled"
          ]
        },
        "statusChange": {
          "type": "array",
          "description": "The status change history that are associated to the ticket.Populated by the server",
          "items": {
            "$ref": "#/definitions/StatusChange"
          }
        },
        "statusChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the status changed."
        },
        "statusChangeReason": {
          "type": "string",
          "description": "The reason for changing the status"
        },
        "ticketType": {
          "type": "string",
          "description": "represent a business type of the trouble ticket e.g. incident, complain, request"
        },
        "troubleTicketRelationship": {
          "type": "array",
          "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets",
          "items": {
            "$ref": "#/definitions/TroubleTicketRelationship"
          }
        }
      },
      "title": "TroubleTicketCreate",
      "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system Skipped properties: id,href"
    },
    "TroubleTicketRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the Trouble Ticket"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the Trouble Ticket"
        },
        "name": {
          "type": "string",
          "description": "Name of the Trouble Ticket"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of the  Trouble Ticket relationship can be isChiled, dependent etc..."
        }
      },
      "title": "TroubleTicketRelationship",
      "description": "Represents a relationship between trouble Trouble Tickets"
    },
    "TroubleTicketSpecification": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "description": "URL serving as reference for the ticket type"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of ticket type"
        },
        "name": {
          "type": "string",
          "description": "Name of ticket type"
        },
        "nodes": {
          "type": "array",
          "description": "List of custom fields defined for the ticket type",
          "items": {
            "$ref": "#/definitions/Node"
          }
        }
      },
      "title": "TroubleTicketSpecification",
      "description": "Ticket types (helptopic) and corresponding custom fields"
    },
    "TroubleTicketUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "channel": {
          "description": "The channel that origin the trouble ticket",
          "$ref": "#/definitions/ChannelRef"
        },
        "description": {
          "type": "string",
          "description": "Description of the trouble or issue"
        },
        "expectedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The expected resolution date determined by the trouble ticket system"
        },
        "externalId": {
          "type": "string",
          "description": "Additional identifier coming from an external system"
        },
        "name": {
          "type": "string",
          "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket"
        },
        "note": {
          "type": "array",
          "description": "The note(s) that are associated to the ticket.",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "pExtension": {
          "description": "Extension for custom fields defined under helptopics (ticket types) and context URLs",
          "$ref": "#/definitions/PExtension"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc..."
        },
        "relatedEntity": {
          "type": "array",
          "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated.",
          "items": {
            "$ref": "#/definitions/RelatedEntity"
          }
        },
        "relatedParty": {
          "type": "array",
          "description": "The related party(ies) that are associated to the ticket.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "requestedResolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The resolution date requested by the user"
        },
        "resolutionDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the trouble ticket was resolved"
        },
        "severity": {
          "type": "string",
          "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc..  Severity values can be for example : Critical, Major, Minor"
        },
        "status": {
          "type": "string",
          "description": "The current status of the trouble ticket",
          "enum": [
            "Open",
            "In Progress",
            "Stalled",
            "Resolved",
            "Closed",
            "Deleted",
            "Merged",
            "Spam",
            "Unapproved",
            "Failed",
            "Cancelled"
          ]
        },
        "statusChangeReason": {
          "type": "string",
          "description": "The reason for changing the status"
        },
        "ticketType": {
          "type": "string",
          "description": "represent a business type of the trouble ticket e.g. incident, complain, request"
        },
        "ticketUpdated": {
          "type": "boolean"
        },
        "troubleTicketRelationship": {
          "type": "array",
          "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets",
          "items": {
            "$ref": "#/definitions/TroubleTicketRelationship"
          }
        }
      },
      "title": "TroubleTicketUpdate",
      "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system Skipped properties: id,href,creationDate,lastUpdate,statusChange,statusChangeDate"
    }
  }
}