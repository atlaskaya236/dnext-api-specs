{
  "swagger": "2.0",
  "info": {
    "description": "This is Swagger UI environment generated for the TMF Resource Ordering Management specification",
    "version": "v4",
    "title": "Resource Ordering Management",
    "contact": {
      "name": "PiA(people in action)",
      "url": "http://www.pia-team.com/",
      "email": "info@pia-team.com"
    },
    "license": {
      "name": "PiA License",
      "url": "hhttp://www.pia-team.com"
    }
  },
  "host": "demo.test.orbitant.dev",
  "basePath": "/api/resourceOrderingManagement/v4",
  "tags": [
    {
      "name": "cancel-resource-order-api-controller",
      "description": "the cancelResourceOrder API"
    },
    {
      "name": "home-controller",
      "description": "Home Controller"
    },
    {
      "name": "hub-api-controller",
      "description": "the hub API"
    },
    {
      "name": "resource-order-api-controller",
      "description": "the resourceOrder API"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "home-controller"
        ],
        "summary": "redirect",
        "operationId": "redirectUsingGET",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/cancelResourceOrder": {
      "get": {
        "tags": [
          "cancelResourceOrder"
        ],
        "summary": "List or find CancelResourceOrder objects",
        "description": "This operation list or find CancelResourceOrder entities",
        "operationId": "listCancelResourceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CancelResourceOrder"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "cancelResourceOrder"
        ],
        "summary": "Creates a CancelResourceOrder",
        "description": "This operation creates a CancelResourceOrder entity.",
        "operationId": "createCancelResourceOrder",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The CancelResourceOrder to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelResourceOrderCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CancelResourceOrder"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CancelResourceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/cancelResourceOrder/{id}": {
      "get": {
        "tags": [
          "cancelResourceOrder"
        ],
        "summary": "Retrieves a CancelResourceOrder by ID",
        "description": "This operation retrieves a CancelResourceOrder entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveCancelResourceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the CancelResourceOrder",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelResourceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "cancelResourceOrder"
        ],
        "summary": "Updates partially a CancelResourceOrder",
        "description": "This operation updates partially a CancelResourceOrder entity.",
        "operationId": "jsonPatchCancelResourceOrder",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the CancelResourceOrder",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "jsonPatch",
            "description": "The patch data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/CancelResourceOrder"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub": {
      "post": {
        "tags": [
          "events subscription"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "events subscription"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the registered listener",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceOrder": {
      "get": {
        "tags": [
          "resourceOrder"
        ],
        "summary": "List or find ResourceOrder objects",
        "description": "This operation list or find ResourceOrder entities",
        "operationId": "listResourceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of requested resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceOrder"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "resourceOrder"
        ],
        "summary": "Creates a ResourceOrder",
        "description": "This operation creates a ResourceOrder entity.",
        "operationId": "createResourceOrder",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The Resource Order to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceOrderCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceOrder"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceOrder/{id}": {
      "get": {
        "tags": [
          "resourceOrder"
        ],
        "summary": "Retrieves a ResourceOrder by ID",
        "description": "This operation retrieves a ResourceOrder entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveResourceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Resource Order",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "resourceOrder"
        ],
        "summary": "Deletes a ResourceOrder",
        "description": "This operation deletes a ResourceOrder entity.",
        "operationId": "deleteResourceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceOrder",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "resourceOrder"
        ],
        "summary": "Updates partially a ResourceOrder",
        "description": "This operation updates partially a ResourceOrder entity.",
        "operationId": "patchResourceOrder_1",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceOrder",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "patch",
            "description": "The ResourceOrder to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ResourceOrder"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AppointmentRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text regarding the appointment made with a party"
        },
        "href": {
          "type": "string",
          "description": "The reference of the appointment"
        },
        "id": {
          "type": "string",
          "description": "The identifier of the referred appointment"
        }
      },
      "title": "AppointmentRef",
      "description": "Refers an appointment, such as a Customer presentation or internal meeting or site visit"
    },
    "AttachmentRefOrValue": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachmentType": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "URI for this Attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this particular attachment"
        },
        "isRef": {
          "type": "boolean"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "name": {
          "type": "string",
          "description": "The name of the attachment"
        },
        "size": {
          "description": "The size of the attachment.",
          "$ref": "#/definitions/Quantity"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "validFor": {
          "description": "The period of time for which the attachment is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "AttachmentRefOrValue",
      "description": "An attachment by value or by reference."
    },
    "CancelResourceOrder": {
      "type": "object",
      "required": [
        "resourceOrder"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason why the order is cancelled."
        },
        "createdBy": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "effectiveCancellationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order is cancelled."
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the cancellation request"
        },
        "id": {
          "type": "string",
          "description": "id of the cancellation request (this is not an order id)"
        },
        "requestedCancellationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the submitter wants the order to be cancelled"
        },
        "resourceOrder": {
          "$ref": "#/definitions/ResourceOrderRef"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "state": {
          "type": "string",
          "description": "Tracks the lifecycle status of the cancellation request, such as Acknowledged, Rejected, InProgress, Pending and so on.",
          "enum": [
            "acknowledged",
            "terminatedWithError",
            "inProgress",
            "done",
            "rejected"
          ]
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "CancelResourceOrder",
      "description": "Request for cancellation an existing resource order"
    },
    "CancelResourceOrderCreate": {
      "type": "object",
      "required": [
        "resourceOrder"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason why the order is cancelled."
        },
        "id": {
          "type": "string",
          "description": "id of the cancellation request (this is not an order id)"
        },
        "requestedCancellationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the submitter wants the order to be cancelled"
        },
        "resourceOrder": {
          "$ref": "#/definitions/ResourceOrderRef"
        }
      },
      "title": "CancelResourceOrderCreate",
      "description": "Request for cancellation an existing resource order Skipped properties: id,href,state,effectiveCancellationDate"
    },
    "CancelResourceOrderUpdate": {
      "type": "object",
      "properties": {
        "cancellationReason": {
          "type": "string",
          "description": "Reason why the order is cancelled."
        },
        "state": {
          "type": "string",
          "enum": [
            "acknowledged",
            "terminatedWithError",
            "inProgress",
            "done",
            "rejected"
          ]
        }
      },
      "title": "CancelResourceOrderUpdate",
      "description": "Patch request for cancellation an existing cancel resource order. Skipped properties: id,href,revision,effectiveCancellationDate,requestedCancellationDate,resourceOrder."
    },
    "Characteristic": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "characteristicRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CharacteristicRelationship"
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the characteristic"
        },
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "value": {
          "type": "string",
          "description": "The value of the characteristic"
        },
        "valueType": {
          "type": "string",
          "description": "Data type of the value of the characteristic"
        }
      },
      "title": "Characteristic",
      "description": "Describes a given characteristic of an object or entity through a name/value pair."
    },
    "CharacteristicRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the characteristic"
        },
        "relationshipType": {
          "type": "string",
          "description": "The type of relationship"
        }
      },
      "title": "CharacteristicRelationship",
      "description": "Another Characteristic that is related to the current Characteristic;"
    },
    "Error": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "localizedMessage": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      },
      "title": "Error"
    },
    "EventSubscription": {
      "type": "object",
      "required": [
        "callback",
        "id"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        }
      },
      "title": "EventSubscription",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "EventSubscriptionInput": {
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      },
      "title": "EventSubscriptionInput",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "ExternalId": {
      "type": "object",
      "required": [
        "entityType",
        "id",
        "owner"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "entityType": {
          "type": "string",
          "description": "Type of the entity within the external system"
        },
        "id": {
          "type": "string",
          "description": "ID of the entity within the external system."
        },
        "owner": {
          "type": "string",
          "description": "Name of the external system that owns the entity."
        }
      },
      "title": "ExternalId",
      "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list."
    },
    "JsonPatch": {
      "type": "object",
      "title": "JsonPatch"
    },
    "Note": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "author": {
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the note within its containing entity (may or may not be globally unique, depending on provider implementation)"
        },
        "text": {
          "type": "string",
          "description": "Text of the note"
        }
      },
      "title": "Note",
      "description": "Extra information about a given entity"
    },
    "Quantity": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Numeric value in a given unit"
        },
        "units": {
          "type": "string",
          "description": "Unit"
        }
      },
      "title": "Quantity",
      "description": "An amount in a given unit"
    },
    "RelatedParty": {
      "type": "object",
      "required": [
        "@referredType",
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        }
      },
      "title": "RelatedParty",
      "description": "Related Entity reference. A related party defines party or party role linked to a specific entity."
    },
    "RelatedPlaceRefOrValue": {
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
        },
        "role": {
          "type": "string"
        }
      },
      "title": "RelatedPlaceRefOrValue",
      "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself"
    },
    "ResourceOrder": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "string",
          "description": "Used to categorize the order from a business perspective that can be useful for the OM system."
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was completed"
        },
        "createdBy": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the Resource Order"
        },
        "expectedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was completed"
        },
        "externalId": {
          "type": "string",
          "description": "DEPRECATED: Use externalReference Instead. ID given by the consumer (to facilitate searches afterwards)"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalId"
          }
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the order"
        },
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the Resource Order. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the Resource Order"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was created"
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceOrderItem"
          }
        },
        "orderType": {
          "type": "string",
          "description": "Name of the Resource Order type"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "requestedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested delivery date from the requestor perspective"
        },
        "requestedStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Order start date wished by the requestor"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was actually started"
        },
        "state": {
          "type": "string",
          "description": "The life cycle state of the resource.",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "ResourceOrder",
      "description": "A Resource Order is a request to provision a set of Resources (logical and physical) triggered by the request to provision a Service through a Service Order"
    },
    "ResourceOrderCreate": {
      "type": "object",
      "required": [
        "orderItem"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "string",
          "description": "Used to categorize the order from a business perspective that can be useful for the OM system."
        },
        "description": {
          "type": "string",
          "description": "free-text description of the Resource Order"
        },
        "expectedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was completed"
        },
        "externalId": {
          "type": "string",
          "description": "DEPRECATED: Use externalReference Instead. ID given by the consumer (to facilitate searches afterwards)"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalId"
          }
        },
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the Resource Order. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the Resource Order"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceOrderItem"
          }
        },
        "orderType": {
          "type": "string",
          "description": "Name of the Resource Order type"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "requestedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested delivery date from the requestor perspective"
        },
        "requestedStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Order start date wished by the requestor"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was actually started"
        }
      },
      "title": "ResourceOrderCreate",
      "description": "A Resource Order is a request to provision a set of Resources (logical and physical) triggered by the request to provision a Service through a Service Order Skipped properties: id,href"
    },
    "ResourceOrderItem": {
      "type": "object",
      "required": [
        "action",
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "action": {
          "type": "string",
          "description": "Can be \"add\" / \"modify\" / \"no_change\"/ \"delete\""
        },
        "appointment": {
          "$ref": "#/definitions/AppointmentRef"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)"
        },
        "orderItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceOrderItemRelationship"
          }
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "Quantity ordered"
        },
        "resource": {
          "$ref": "#/definitions/ResourceRefOrValue"
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "state": {
          "type": "string",
          "description": "State of the order item : described in the state machine diagram"
        }
      },
      "title": "ResourceOrderItem",
      "description": "An identified part of the order. A resource order is decomposed into one or more order items."
    },
    "ResourceOrderItemRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "itemId": {
          "type": "string",
          "description": "Identifier of the line item"
        },
        "resourceOrderHref": {
          "type": "string",
          "description": "Link to the order to which this item belongs to"
        },
        "resourceOrderId": {
          "type": "string",
          "description": "Identifier of the order that this item belongs to"
        }
      },
      "title": "ResourceOrderItemRef"
    },
    "ResourceOrderItemRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "orderItem": {
          "$ref": "#/definitions/ResourceOrderItemRef"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of the order item relationship"
        }
      },
      "title": "ResourceOrderItemRelationship"
    },
    "ResourceOrderRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the related Resource Order"
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the related resource order"
        }
      },
      "title": "ResourceOrderRef"
    },
    "ResourceOrderUpdate": {
      "type": "object",
      "required": [
        "orderItem"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "string",
          "description": "Used to categorize the order from a business perspective that can be useful for the OM system."
        },
        "description": {
          "type": "string",
          "description": "free-text description of the Resource Order"
        },
        "expectedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was completed"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalId"
          }
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the Resource Order"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceOrderItem"
          }
        },
        "orderType": {
          "type": "string",
          "description": "Name of the Resource Order type"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "requestedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested delivery date from the requestor perspective"
        },
        "requestedStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Order start date wished by the requestor"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was actually started"
        },
        "state": {
          "type": "string",
          "description": "The life cycle state of the resource.",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      },
      "title": "ResourceOrderUpdate",
      "description": "A Resource Order is a request to provision a set of Resources (logical and physical) triggered by the request to provision a Service through a Service Order Skipped properties: id,href,completionDate,orderDate"
    },
    "ResourceRefOrValue": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "administrativeState": {
          "type": "string",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on.",
          "enum": [
            "locked",
            "unlocked",
            "shutdown"
          ]
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "href": {
          "type": "string",
          "description": "The URI for the object itself."
        },
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "type": "string",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on.",
          "enum": [
            "enable",
            "disable"
          ]
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "type": "string",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "usageState": {
          "type": "string",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on.",
          "enum": [
            "idle",
            "active",
            "busy"
          ]
        }
      },
      "title": "ResourceRefOrValue",
      "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Resource entity and not the related ResourceRefOrValue class itself"
    },
    "ResourceRelationship": {
      "type": "object",
      "required": [
        "resource"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "relationshipType": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/ResourceRefOrValue"
        },
        "resourceRelationshipCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        }
      },
      "title": "ResourceRelationship"
    },
    "ResourceSpecificationRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource specification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredResourceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Resource specification version"
        }
      },
      "title": "ResourceSpecificationRef",
      "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification."
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "className": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "methodName": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      },
      "title": "StackTraceElement"
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "localizedMessage": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      },
      "title": "Throwable"
    },
    "TimePeriod": {
      "type": "object",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
        }
      },
      "title": "TimePeriod",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
    }
  }
}