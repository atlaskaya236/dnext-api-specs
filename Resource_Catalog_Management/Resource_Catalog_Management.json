{
  "swagger": "2.0",
  "info": {
    "description": "## TMF API Reference: TMF634 - Resource Catalog Management\n\n  ### Release : 19.0 - June 2019\n\nResource Catalog API is one of Catalog Management API Family. Resource Catalog API goal is to provide a catalog of resources.\n### Operations Resource Catalog API performs the following operations on the resources :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity - Manage notification of events",
    "version": "Version v4 (prepared with Resource Catalog Management API REST Specification TMF634 Release 19.0)",
    "title": "Orbitant Resource Catalog Management API",
    "contact": {
      "name": "PiA(people in action)",
      "url": "http://www.pia-team.com/",
      "email": "info@pia-team.com"
    },
    "license": {
      "name": "PiA License",
      "url": "hhttp://www.pia-team.com"
    }
  },
  "host": "sprint58-release-test.test.orbitant.dev",
  "basePath": "/api/resourceCatalogManagement/v4",
  "tags": [
    {
      "name": "exportJob",
      "description": "the exportJob API"
    },
    {
      "name": "hub",
      "description": "the hub API"
    },
    {
      "name": "importJob",
      "description": "the importJob API"
    },
    {
      "name": "logicalResourceSpecification",
      "description": "the logicalResourceSpecification API"
    },
    {
      "name": "physicalResourceSpecification",
      "description": "the physicalResourceSpecification API"
    },
    {
      "name": "resourceCandidate",
      "description": "the resourceCandidate API"
    },
    {
      "name": "resourceCatalog",
      "description": "the resourceCatalog API"
    },
    {
      "name": "resourceCategory",
      "description": "the resourceCategory API"
    },
    {
      "name": "resourceFunctionSpecification",
      "description": "the resourceFunctionSpecification API"
    },
    {
      "name": "resourceSpecification",
      "description": "the resourceSpecification API"
    }
  ],
  "paths": {
    "/exportJob": {
      "get": {
        "tags": [
          "exportJob"
        ],
        "summary": "List or find ExportJob objects",
        "description": "This operation list or find ExportJob entities",
        "operationId": "listExportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExportJob"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "exportJob"
        ],
        "summary": "Creates a ExportJob",
        "description": "This operation creates a ExportJob entity.",
        "operationId": "createExportJob",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ExportJob to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportJob_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/exportJob/{id}": {
      "get": {
        "tags": [
          "exportJob"
        ],
        "summary": "Retrieves a ExportJob by ID",
        "description": "This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveExportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ExportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "exportJob"
        ],
        "summary": "Deletes a ExportJob",
        "description": "This operation deletes a ExportJob entity.",
        "operationId": "deleteExportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ExportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub": {
      "post": {
        "tags": [
          "events subscription",
          "hub"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "events subscription",
          "hub"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the registered listener",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/importJob": {
      "get": {
        "tags": [
          "importJob"
        ],
        "summary": "List or find ImportJob objects",
        "description": "This operation list or find ImportJob entities",
        "operationId": "listImportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImportJob"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "importJob"
        ],
        "summary": "Creates a ImportJob",
        "description": "This operation creates a ImportJob entity.",
        "operationId": "createImportJob",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ImportJob to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportJob_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/importJob/{id}": {
      "get": {
        "tags": [
          "importJob"
        ],
        "summary": "Retrieves a ImportJob by ID",
        "description": "This operation retrieves a ImportJob entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveImportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ImportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "importJob"
        ],
        "summary": "Deletes a ImportJob",
        "description": "This operation deletes a ImportJob entity.",
        "operationId": "deleteImportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ImportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/logicalResourceSpecification": {
      "post": {
        "tags": [
          "logicalResourceSpecification"
        ],
        "summary": "Creates a LogicalResourceSpecification",
        "description": "This operation creates a LogicalResourceSpecification entity.",
        "operationId": "createLogicalResourceSpecification",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "logicalResourceSpecificationCreate",
            "description": "The LogicalResourceSpecification to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogicalResourceSpecification_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogicalResourceSpecification"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LogicalResourceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/logicalResourceSpecification/{id}": {
      "get": {
        "tags": [
          "logicalResourceSpecification"
        ],
        "summary": "Retrieves a LogicalResourceSpecification by ID",
        "description": "This operation retrieves a LogicalResourceSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveLogicalResourceSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceSpecification",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LogicalResourceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "logicalResourceSpecification"
        ],
        "summary": "Deletes a LogicalResourceSpecification",
        "description": "This operation deletes a LogicalResourceSpecification entity.",
        "operationId": "deleteLogicalResourceSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceSpecification",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the ServiceCandidate",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "logicalResourceSpecification"
        ],
        "summary": "Updates partially a LogicalResourceSpecification",
        "description": "This operation updates partially a LogicalResourceSpecification entity.",
        "operationId": "patchLogicalResourceSpecification",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the LogicalResourceSpecification",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the LogicalResourceSpecification",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LogicalResourceSpecification"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/physicalResourceSpecification": {
      "post": {
        "tags": [
          "physicalResourceSpecification"
        ],
        "summary": "Creates a PhysicalResourceSpecification",
        "description": "This operation creates a PhysicalResourceSpecification entity.",
        "operationId": "createPhysicalResourceSpecification",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The PhysicalResourceSpecification to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalResourceSpecification_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PhysicalResourceSpecification"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PhysicalResourceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/physicalResourceSpecification/{id}": {
      "get": {
        "tags": [
          "physicalResourceSpecification"
        ],
        "summary": "Retrieves a PhysicalResourceSpecification by ID",
        "description": "This operation retrieves a PhysicalResourceSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrievePhysicalResourceSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceSpecification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PhysicalResourceSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "physicalResourceSpecification"
        ],
        "summary": "Deletes a PhysicalResourceSpecification",
        "description": "This operation deletes a PhysicalResourceSpecification entity.",
        "operationId": "deletePhysicalResourceSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceSpecification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "physicalResourceSpecification"
        ],
        "summary": "Updates partially a PhysicalResourceSpecification",
        "description": "This operation updates partially a PhysicalResourceSpecification entity.",
        "operationId": "patchPhysicalResourceSpecification_1",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the PhysicalResourceSpecification",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "physicalResourceSpecificationUpdate",
            "description": "The PhysicalResourceSpecification to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalResourceSpecification_Update"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/PhysicalResourceSpecification"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceCandidate": {
      "get": {
        "tags": [
          "resourceCandidate"
        ],
        "summary": "List or find ResourceCandidate objects",
        "description": "This operation list or find ResourceCandidate entities",
        "operationId": "listResourceCandidate",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceCandidate"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "resourceCandidate"
        ],
        "summary": "Creates a ResourceCandidate",
        "description": "This operation creates a ResourceCandidate entity.",
        "operationId": "createResourceCandidate",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ResourceCandidate to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceCandidate_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceCandidate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourceCandidate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceCandidate/{id}": {
      "get": {
        "tags": [
          "resourceCandidate"
        ],
        "summary": "Retrieves a ResourceCandidate by ID",
        "description": "This operation retrieves a ResourceCandidate entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveResourceCandidate",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceCandidate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceCandidate"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "resourceCandidate"
        ],
        "summary": "Deletes a ResourceCandidate",
        "description": "This operation deletes a ResourceCandidate entity.",
        "operationId": "deleteResourceCandidate",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceCandidate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "resourceCandidate"
        ],
        "summary": "Updates partially a ResourceCandidate",
        "description": "This operation updates partially a ResourceCandidate entity.",
        "operationId": "patchResourceCandidate_1",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ResourceCandidate to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceCandidate_Update"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceCandidate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ResourceCandidate"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceCatalog": {
      "get": {
        "tags": [
          "resourceCatalog"
        ],
        "summary": "List or find ResourceCatalog objects",
        "description": "This operation list or find ResourceCatalog entities",
        "operationId": "listResourceCatalog",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceCatalog"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "resourceCatalog"
        ],
        "summary": "Creates a ResourceCatalog",
        "description": "This operation creates a ResourceCatalog entity.",
        "operationId": "createResourceCatalog",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ResourceCatalog to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceCatalog_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceCatalog"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourceCatalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceCatalog/{id}": {
      "get": {
        "tags": [
          "resourceCatalog"
        ],
        "summary": "Retrieves a ResourceCatalog by ID",
        "description": "This operation retrieves a ResourceCatalog entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveResourceCatalog",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceCatalog",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceCatalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "resourceCatalog"
        ],
        "summary": "Deletes a ResourceCatalog",
        "description": "This operation deletes a ResourceCatalog entity.",
        "operationId": "deleteResourceCatalog",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceCatalog",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "resourceCatalog"
        ],
        "summary": "Updates partially a ResourceCatalog",
        "description": "This operation updates partially a ResourceCatalog entity.",
        "operationId": "patchResourceCatalog",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceCatalog",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ResourceCatalog"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceCategory": {
      "get": {
        "tags": [
          "resourceCategory"
        ],
        "summary": "List or find ResourceCategory objects",
        "description": "This operation list or find ResourceCategory entities",
        "operationId": "listResourceCategory",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceCategory"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "resourceCategory"
        ],
        "summary": "Creates a ResourceCategory",
        "description": "This operation creates a ResourceCategory entity.",
        "operationId": "createResourceCategory",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "resourceCategoryCreate",
            "description": "The ResourceCategory to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceCategory_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceCategory"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourceCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceCategory/{id}": {
      "get": {
        "tags": [
          "resourceCategory"
        ],
        "summary": "Retrieves a ResourceCategory by ID",
        "description": "This operation retrieves a ResourceCategory entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveResourceCategory",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceCategory",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceCategory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "resourceCategory"
        ],
        "summary": "Deletes a ResourceCategory",
        "description": "This operation deletes a ResourceCategory entity.",
        "operationId": "deleteResourceCategory",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceCategory",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "resourceCategory"
        ],
        "summary": "Updates partially a ResourceCategory",
        "description": "This operation updates partially a ResourceCategory entity.",
        "operationId": "patchResourceCategory",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceCategory",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "resourceCategoryUpdate",
            "description": "The ResourceCategory to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceCategory_Update"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ResourceCategory"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceFunctionSpecification": {
      "get": {
        "tags": [
          "resourceFunctionSpecification"
        ],
        "summary": "List or find ResourceFunctionSpecification objects",
        "description": "This operation list or find ResourceFunctionSpecification entities",
        "operationId": "listResourceFunctionSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceFunctionSpecification"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "resourceFunctionSpecification"
        ],
        "summary": "Creates a ResourceFunctionSpecification",
        "description": "This operation creates a ResourceFunctionSpecification entity.",
        "operationId": "createResourceFunctionSpecification",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ResourceFunctionSpecification to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceFunctionSpecification_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResourceFunctionSpecification"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResourceFunctionSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceFunctionSpecification/{id}": {
      "get": {
        "tags": [
          "resourceFunctionSpecification"
        ],
        "summary": "Retrieves a ResourceFunctionSpecification by ID",
        "description": "This operation retrieves a ResourceFunctionSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveResourceFunctionSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceFunctionSpecification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceFunctionSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "resourceFunctionSpecification"
        ],
        "summary": "Deletes a ResourceFunctionSpecification",
        "description": "This operation deletes a ResourceFunctionSpecification entity.",
        "operationId": "deleteResourceFunctionSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceFunctionSpecification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "resourceFunctionSpecification"
        ],
        "summary": "Updates partially a ResourceFunctionSpecification",
        "description": "This operation updates partially a ResourceFunctionSpecification entity.",
        "operationId": "patchResourceFunctionSpecification_1",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ResourceFunctionSpecification to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceFunctionSpecification_Update"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ResourceFunctionSpecification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ResourceFunctionSpecification"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/resourceSpecification": {
      "get": {
        "tags": [
          "resourceSpecification"
        ],
        "summary": "List or find ResourceSpecification objects",
        "description": "This operation list or find ResourceSpecification entities",
        "operationId": "listResourceSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceSpecification"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AttachmentRefOrValue": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachmentType": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "content": {
          "type": "string",
          "description": "The actual contents of the attachment object, if embedded, encoded as base64"
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "URI for this Attachment"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this particular attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "name": {
          "type": "string",
          "description": "The name of the attachment"
        },
        "size": {
          "description": "The size of the attachment.",
          "$ref": "#/definitions/Quantity"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "validFor": {
          "description": "The period of time for which the attachment is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "AttachmentRefOrValue",
      "description": "An attachment by value or by reference. For AttachmentRefOrValue, the attribute type,schemaLocation and referredType are related to the contained entity and not to AttchmentRefOrValue itself"
    },
    "BundledFeatureSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the BundledFeatureSpecification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the BundledFeatureSpecification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the BundledFeatureSpecification"
        }
      },
      "title": "BundledFeatureSpecification",
      "description": "A type of FeatureSpecification that belongs to a grouping of FeatureSpecifications made available to the market. It inherits of all attributes of FeatureSpecification."
    },
    "BundledResourceFunctionSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the BundledResourceFunctionSpecification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the BundledResourceFunctionSpecification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the BundledResourceFunctionSpecification"
        },
        "version": {
          "type": "string",
          "description": "The version given to the target resource specification instance"
        }
      },
      "title": "BundledResourceFunctionSpecification",
      "description": "A type of ResourceFunctionSpecification that belongs to a grouping of ResourceFunctionSpecifications made available to the market. It inherits of all attributes of ResourceFunctionSpecification."
    },
    "BundledResourceSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the BundledResourceSpecification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the BundledResourceSpecification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the BundledResourceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Version of the BundledResourceSpecification"
        }
      },
      "title": "BundledResourceSpecification",
      "description": "A type of ResourceSpecification that belongs to a grouping of ResourceSpecifications made available to the market. It inherits of all attributes of ResourceSpecification."
    },
    "ConnectionPointSpecificationRef": {
      "type": "object",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        }
      },
      "title": "ConnectionPointSpecificationRef",
      "description": "Connection point specification reference. A connection point provides a service access point (SAP) for input and/or output of the resource function."
    },
    "ConnectionSpecification": {
      "type": "object",
      "properties": {
        "associationType": {
          "type": "string",
          "description": "Association type."
        },
        "endpointSpecification": {
          "type": "array",
          "description": "Specifications for resource graph vertices connected by this edge.",
          "items": {
            "$ref": "#/definitions/EndpointSpecificationRef"
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for graph edge specification."
        },
        "name": {
          "type": "string",
          "description": "Descriptive name for graph edge specification"
        }
      },
      "title": "ConnectionSpecification",
      "description": "A specification for an edge in a resource graph."
    },
    "ConstraintRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The (class) type of the referred constraint"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target constraint"
        },
        "id": {
          "type": "string",
          "description": "reference id to the target constraint"
        },
        "name": {
          "type": "string",
          "description": "Name given to the constraint"
        },
        "version": {
          "type": "string",
          "description": "constraint version"
        }
      },
      "title": "ConstraintRef",
      "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec."
    },
    "EndpointSpecificationRef": {
      "type": "object",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "connectionPointSpecification": {
          "type": "array",
          "description": "A specification for the connection point (SAP) of the associated resource function (optional).",
          "items": {
            "$ref": "#/definitions/ConnectionPointSpecificationRef"
          }
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "isRoot": {
          "type": "boolean",
          "description": "Directionality: true when endpoint is a source, false when a sink. If true for all endpoints, connectivity is bidirectional. Default is true."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role of the Resource Function."
        }
      },
      "title": "EndpointSpecificationRef",
      "description": "A specification for a vertex in a resource graph."
    },
    "Error": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "localizedMessage": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      },
      "title": "Error"
    },
    "EventSubscription": {
      "type": "object",
      "required": [
        "callback",
        "id"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        }
      },
      "title": "EventSubscription",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "EventSubscriptionInput": {
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      },
      "title": "EventSubscriptionInput",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "ExportJob": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        },
        "href": {
          "type": "string",
          "description": "Reference of the export job"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the export job"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        }
      },
      "title": "ExportJob",
      "description": "Represents a task used to export resources to a file"
    },
    "ExportJob_Create": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        }
      },
      "title": "ExportJob_Create",
      "description": "Represents a task used to export resources to a file Skipped properties: id,href"
    },
    "FeatureSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "bundledFeatureSpecification": {
          "type": "array",
          "description": "Bundled feature specification",
          "items": {
            "$ref": "#/definitions/BundledFeatureSpecification"
          }
        },
        "constraint": {
          "type": "array",
          "description": "This is a list of feature constraints",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "featureSpecCharacteristic": {
          "type": "array",
          "description": "This is a list of characteristics for a particular feature",
          "items": {
            "$ref": "#/definitions/FeatureSpecificationCharacteristic"
          }
        },
        "featureSpecRelationship": {
          "type": "array",
          "description": "A dependency, exclusivity or aggratation relationship between/among feature specifications.",
          "items": {
            "$ref": "#/definitions/FeatureSpecificationRelationship"
          }
        },
        "id": {
          "type": "string",
          "description": "Identifier of the feature specification. Must be locally unique within the containing resource specification, thus allowing direct access to the feature spec."
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this is a feature group (true) or not (false)"
        },
        "isEnabled": {
          "type": "boolean",
          "description": "A flag indicating if the feature is enabled (true) or not (false)"
        },
        "name": {
          "type": "string",
          "description": "Unique name given to the feature specification"
        },
        "validFor": {
          "description": "The period for which this feature specification is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Version of the feature specification"
        }
      },
      "title": "FeatureSpecification",
      "description": "Specification for applicable configuration features for a resource specification."
    },
    "FeatureSpecificationCharacteristic": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type."
        },
        "configurable": {
          "type": "boolean",
          "description": "True is the feature is configurable."
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a feature."
        },
        "featureSpecCharRelationship": {
          "type": "array",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among feature characteristics.",
          "items": {
            "$ref": "#/definitions/FeatureSpecificationCharacteristicRelationship"
          }
        },
        "featureSpecCharacteristicValue": {
          "type": "array",
          "description": "Used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a FeatureCharacteristic object.",
          "items": {
            "$ref": "#/definitions/FeatureSpecificationCharacteristicValue"
          }
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification."
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a CharacteristicValue can take on."
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a CharacteristicValue can take on."
        },
        "name": {
          "type": "string",
          "description": "This is the name for the feature charateristic."
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
        },
        "validFor": {
          "description": "The period of time for which a characteristic is applicable.",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on."
        }
      },
      "title": "FeatureSpecificationCharacteristic",
      "description": "Configuration feature characteristic specification."
    },
    "FeatureSpecificationCharacteristicRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "characteristicId": {
          "type": "string",
          "description": "Unique identifier of the characteristic within the the target feature specification"
        },
        "featureId": {
          "type": "string",
          "description": "Unique identifier of the target feature specification within the resource specification."
        },
        "name": {
          "type": "string",
          "description": "Name of the target characteristic"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
        },
        "resourceSpecificationHref": {
          "type": "string",
          "description": "Hyperlink reference to the resource specification containing the target feature and feature characteristic"
        },
        "resourceSpecificationId": {
          "type": "string",
          "description": "Unique identifier of the resource specification containing the target feature and feature characteristic"
        },
        "validFor": {
          "description": "The period for which the object is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "FeatureSpecificationCharacteristicRelationship",
      "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among FeatureSpecificationCharacteristics."
    },
    "FeatureSpecificationCharacteristicValue": {
      "type": "object",
      "required": [
        "valueType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "isDefault": {
          "type": "boolean",
          "description": "True if the value is the default value for a characteristic."
        },
        "rangeInterval": {
          "type": "string",
          "description": "Specifies the inclusion or exclusion of the valueFrom and valueTo attributes."
        },
        "regex": {
          "type": "string",
          "description": "A regular expression constraint for given value."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "A determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values."
        },
        "validFor": {
          "description": "The period of time for which a value is applicable.",
          "$ref": "#/definitions/TimePeriod"
        },
        "value": {
          "type": "string",
          "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
        },
        "valueFrom": {
          "type": "integer",
          "format": "int32",
          "description": "The low range value that a characteristic can take on."
        },
        "valueTo": {
          "type": "integer",
          "format": "int32",
          "description": "The upper range value that a characteristic can take on."
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can take on."
        }
      },
      "title": "FeatureSpecificationCharacteristicValue",
      "description": "A number or text that can be assigned to a FeatureSpecificationCharacteristic."
    },
    "FeatureSpecificationRelationship": {
      "type": "object",
      "required": [
        "name",
        "relationshipType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "featureId": {
          "type": "string",
          "description": "Unique identifier of the target feature specification."
        },
        "name": {
          "type": "string",
          "description": "This is the name of the target feature specification."
        },
        "relationshipType": {
          "type": "string",
          "description": "This is the type of the feature specification relationship."
        },
        "resourceSpecificationHref": {
          "type": "string",
          "description": "Hyperlink reference to the resource specification containing the target feature"
        },
        "resourceSpecificationId": {
          "type": "string",
          "description": "Unique identifier of the resource specification containing the target feature"
        },
        "validFor": {
          "description": "The period for which this feature spoecification relationship is valid.",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "FeatureSpecificationRelationship",
      "description": "Configuration feature"
    },
    "FulfillmentSpecification": {
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "description": "Add FulfillmentSpecification."
        },
        "delete": {
          "type": "string",
          "description": "Delete FulfillmentSpecification."
        },
        "modify": {
          "type": "string",
          "description": "Modify FulfillmentSpecification."
        }
      },
      "title": "FulfillmentSpecification"
    },
    "FulfillmentSpecificationOperation": {
      "type": "object",
      "properties": {
        "cancelFlow": {
          "type": "string",
          "description": "Cancel Flow FulfillmentSpecification."
        },
        "operationType": {
          "type": "string",
          "description": "Fulfillment Specification Operation Type."
        },
        "postFlow": {
          "type": "string",
          "description": "Post Flow FulfillmentSpecification."
        },
        "preFlow": {
          "type": "string",
          "description": "Pre Flow FulfillmentSpecification."
        },
        "relatedSpecifications": {
          "type": "array",
          "description": "Relation definition between product specifications.",
          "items": {
            "$ref": "#/definitions/RelatedSpecification"
          }
        }
      },
      "title": "FulfillmentSpecificationOperation"
    },
    "ImportJob": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        },
        "href": {
          "type": "string",
          "description": "Reference of the import job"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the import job"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        }
      },
      "title": "ImportJob",
      "description": "Represents a task used to import resources from a file"
    },
    "ImportJob_Create": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        }
      },
      "title": "ImportJob_Create",
      "description": "Represents a task used to import resources from a file Skipped properties: id,href"
    },
    "LogicalResourceSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceSpecification": {
          "type": "array",
          "description": "A type of ResourceSpecification that belongs to a grouping of ResourceSpecifications made available to the market. It inherits of all attributes of ResourceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "pExtension": {
          "description": "ResourceSpecification model has been extended.",
          "$ref": "#/definitions/ResourceSpecificationExtension"
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "LogicalResourceSpecification",
      "description": "This is a base class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a LogicalResource."
    },
    "LogicalResourceSpecification_Create": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceSpecification": {
          "type": "array",
          "description": "A type of ResourceSpecification that belongs to a grouping of ResourceSpecifications made available to the market. It inherits of all attributes of ResourceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "pExtension": {
          "description": "ResourceSpecification model has been extended.",
          "$ref": "#/definitions/ResourceSpecificationExtension"
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "LogicalResourceSpecification_Create",
      "description": "This is a base class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a LogicalResource. Skipped properties: id,href"
    },
    "LogicalResourceSpecification_Update": {
      "type": "object",
      "properties": {
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceSpecification": {
          "type": "array",
          "description": "A type of ResourceSpecification that belongs to a grouping of ResourceSpecifications made available to the market. It inherits of all attributes of ResourceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "pExtension": {
          "description": "ResourceSpecification model has been extended.",
          "$ref": "#/definitions/ResourceSpecificationExtension"
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Specificaiton version"
        }
      },
      "title": "LogicalResourceSpecification_Update",
      "description": "This is a base class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a LogicalResource. Skipped properties: id,href"
    },
    "PhysicalResourceSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceSpecification": {
          "type": "array",
          "description": "A type of ResourceSpecification that belongs to a grouping of ResourceSpecifications made available to the market. It inherits of all attributes of ResourceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "model": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "pExtension": {
          "description": "ResourceSpecification model has been extended.",
          "$ref": "#/definitions/ResourceSpecificationExtension"
        },
        "part": {
          "type": "string",
          "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "sku": {
          "type": "string",
          "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "vendor": {
          "type": "string",
          "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
        },
        "version": {
          "type": "string"
        }
      },
      "title": "PhysicalResourceSpecification",
      "description": "This is a concrete class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a PhysicalResource."
    },
    "PhysicalResourceSpecification_Create": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceSpecification": {
          "type": "array",
          "description": "A type of ResourceSpecification that belongs to a grouping of ResourceSpecifications made available to the market. It inherits of all attributes of ResourceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "model": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "pExtension": {
          "description": "ResourceSpecification model has been extended.",
          "$ref": "#/definitions/ResourceSpecificationExtension"
        },
        "part": {
          "type": "string",
          "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "sku": {
          "type": "string",
          "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "vendor": {
          "type": "string",
          "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
        },
        "version": {
          "type": "string"
        }
      },
      "title": "PhysicalResourceSpecification_Create",
      "description": "This is a concrete class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a PhysicalResource. Skipped properties: id,href"
    },
    "PhysicalResourceSpecification_Update": {
      "type": "object",
      "properties": {
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceSpecification": {
          "type": "array",
          "description": "A type of ResourceSpecification that belongs to a grouping of ResourceSpecifications made available to the market. It inherits of all attributes of ResourceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "model": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "pExtension": {
          "description": "ResourceSpecification model has been extended.",
          "$ref": "#/definitions/ResourceSpecificationExtension"
        },
        "part": {
          "type": "string",
          "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "sku": {
          "type": "string",
          "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "vendor": {
          "type": "string",
          "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
        },
        "version": {
          "type": "string",
          "description": "Specificaiton version"
        }
      },
      "title": "PhysicalResourceSpecification_Update",
      "description": "This is a concrete class that is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a PhysicalResource. Skipped properties: id,href"
    },
    "Quantity": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Numeric value in a given unit"
        },
        "units": {
          "type": "string",
          "description": "Unit"
        }
      },
      "title": "Quantity",
      "description": "An amount in a given unit"
    },
    "RelatedParty": {
      "type": "object",
      "required": [
        "@referredType",
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        }
      },
      "title": "RelatedParty",
      "description": "Related Entity reference. A related party defines party or party role linked to a specific entity."
    },
    "RelatedSpecification": {
      "type": "object",
      "required": [
        "relation",
        "specification"
      ],
      "properties": {
        "relation": {
          "type": "string",
          "description": "Relation definition between Product Specification."
        },
        "specification": {
          "description": "Related Product Specification.",
          "$ref": "#/definitions/ResourceSpecificationRef"
        }
      },
      "title": "RelatedSpecification"
    },
    "ResourceCandidate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "array",
          "description": "The categories in which this candidate is exposed",
          "items": {
            "$ref": "#/definitions/ResourceCategoryRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "resourceSpecification": {
          "description": "The detailed specification for this candidate",
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceCandidate",
      "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none."
    },
    "ResourceCandidateRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "the version of resource candidate"
        }
      },
      "title": "ResourceCandidateRef",
      "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none."
    },
    "ResourceCandidate_Create": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "array",
          "description": "The categories in which this candidate is exposed",
          "items": {
            "$ref": "#/definitions/ResourceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource candidate."
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "resourceSpecification": {
          "description": "The detailed specification for this candidate",
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceCandidate_Create",
      "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none. Skipped properties: id,href"
    },
    "ResourceCandidate_Update": {
      "type": "object",
      "properties": {
        "category": {
          "type": "array",
          "description": "The categories in which this candidate is exposed",
          "items": {
            "$ref": "#/definitions/ResourceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource candidate."
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "resourceSpecification": {
          "description": "The detailed specification for this candidate",
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "the version of resource candidate"
        }
      },
      "title": "ResourceCandidate_Update",
      "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none. Skipped properties: id,href"
    },
    "ResourceCatalog": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "array",
          "description": "List of root categories contained in this catalog",
          "items": {
            "$ref": "#/definitions/ResourceCategoryRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this catalog",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceCatalog",
      "description": "The root entity for resource catalog management. A resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers)."
    },
    "ResourceCatalog_Create": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "array",
          "description": "List of root categories contained in this catalog",
          "items": {
            "$ref": "#/definitions/ResourceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this catalog",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "validFor": {
          "description": "The period for which the catalog is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceCatalog_Create",
      "description": "The root entity for resource catalog management. A resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). Skipped properties: id,href"
    },
    "ResourceCatalog_Update": {
      "type": "object",
      "properties": {
        "category": {
          "type": "array",
          "description": "List of root categories contained in this catalog",
          "items": {
            "$ref": "#/definitions/ResourceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this catalog",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "validFor": {
          "description": "The period for which the catalog is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        }
      },
      "title": "ResourceCatalog_Update",
      "description": "The root entity for resource catalog management. A resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). Skipped properties: id,href"
    },
    "ResourceCategory": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "array",
          "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings.",
          "items": {
            "$ref": "#/definitions/ResourceCategoryRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "parent": {
          "description": " parent category",
          "$ref": "#/definitions/ResourceCategoryRef"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this category",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCandidate": {
          "type": "array",
          "description": "List of resource candidates accessible via this category",
          "items": {
            "$ref": "#/definitions/ResourceCandidateRef"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceCategory",
      "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories."
    },
    "ResourceCategoryRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Category version"
        }
      },
      "title": "ResourceCategoryRef",
      "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories."
    },
    "ResourceCategory_Create": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "array",
          "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings.",
          "items": {
            "$ref": "#/definitions/ResourceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "id": {
          "type": "string"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "parent": {
          "description": "parent of the category",
          "$ref": "#/definitions/ResourceCategoryRef"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this category",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCandidate": {
          "type": "array",
          "description": "List of resource candidates accessible via this category",
          "items": {
            "$ref": "#/definitions/ResourceCandidateRef"
          }
        },
        "validFor": {
          "description": "The period for which the category is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceCategory_Create",
      "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories. Skipped properties: id,href"
    },
    "ResourceCategory_Update": {
      "type": "object",
      "properties": {
        "category": {
          "type": "array",
          "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings.",
          "items": {
            "$ref": "#/definitions/ResourceCategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "parentVersion": {
          "type": "string",
          "description": "Version of the parent category"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this category",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCandidate": {
          "type": "array",
          "description": "List of resource candidates accessible via this category",
          "items": {
            "$ref": "#/definitions/ResourceCandidateRef"
          }
        },
        "validFor": {
          "description": "The period for which the category is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        }
      },
      "title": "ResourceCategory_Update",
      "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories. Skipped properties: id,href"
    },
    "ResourceFunctionSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceFunctionSpecification": {
          "type": "array",
          "description": "A type of ResourceFunctionSpecification that belongs to a grouping of ResourceFunctionSpecifications made available to the market. It inherits of all attributes of ResourceFunctionSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceFunctionSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "connectionPointSpecification": {
          "type": "array",
          "description": "External connection point specifications. These are the service access points (SAP) where inputs and outputs of the function are available.",
          "items": {
            "$ref": "#/definitions/ConnectionPointSpecificationRef"
          }
        },
        "connectivitySpecification": {
          "type": "array",
          "description": "Internal connectivity potential specifications.",
          "items": {
            "$ref": "#/definitions/ResourceGraphSpecification"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource function specification is a bundled specification (true) or single (false)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceFunctionSpecification",
      "description": "Resource function specifications"
    },
    "ResourceFunctionSpecification_Create": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceFunctionSpecification": {
          "type": "array",
          "description": "A type of ResourceFunctionSpecification that belongs to a grouping of ResourceFunctionSpecifications made available to the market. It inherits of all attributes of ResourceFunctionSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceFunctionSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "connectionPointSpecification": {
          "type": "array",
          "description": "External connection point specifications. These are the service access points (SAP) where inputs and outputs of the function are available.",
          "items": {
            "$ref": "#/definitions/ConnectionPointSpecificationRef"
          }
        },
        "connectivitySpecification": {
          "type": "array",
          "description": "Internal connectivity potential specifications.",
          "items": {
            "$ref": "#/definitions/ResourceGraphSpecification"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource function specification is a bundled specification (true) or single (false)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update of this REST resource"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceFunctionSpecification_Create",
      "description": "Resource function specifications Skipped properties: id,href"
    },
    "ResourceFunctionSpecification_Update": {
      "type": "object",
      "properties": {
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceFunctionSpecification": {
          "type": "array",
          "description": "A type of ResourceFunctionSpecification that belongs to a grouping of ResourceFunctionSpecifications made available to the market. It inherits of all attributes of ResourceFunctionSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceFunctionSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "connectionPointSpecification": {
          "type": "array",
          "description": "External connection point specifications. These are the service access points (SAP) where inputs and outputs of the function are available.",
          "items": {
            "$ref": "#/definitions/ConnectionPointSpecificationRef"
          }
        },
        "connectivitySpecification": {
          "type": "array",
          "description": "Internal connectivity potential specifications.",
          "items": {
            "$ref": "#/definitions/ResourceGraphSpecification"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource function specification is a bundled specification (true) or single (false)."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name given to this REST resource"
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        }
      },
      "title": "ResourceFunctionSpecification_Update",
      "description": "Resource function specifications Skipped properties: id,href"
    },
    "ResourceGraphSpecification": {
      "type": "object",
      "properties": {
        "connectionSpecification": {
          "type": "array",
          "description": "Resource graph edge specifications.",
          "items": {
            "$ref": "#/definitions/ConnectionSpecification"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this REST resource"
        },
        "graphSpecificationRelationship": {
          "type": "array",
          "description": "Relationships to other resource graph specifications.",
          "items": {
            "$ref": "#/definitions/ResourceGraphSpecificationRelationship"
          }
        },
        "id": {
          "type": "string",
          "description": " Unique identifier of the resource graph specification."
        },
        "name": {
          "type": "string",
          "description": "Descriptive name for the resource graph specification."
        }
      },
      "title": "ResourceGraphSpecification",
      "description": "Resource graph specification."
    },
    "ResourceGraphSpecificationRef": {
      "type": "object",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        }
      },
      "title": "ResourceGraphSpecificationRef",
      "description": "Resource graph specification reference."
    },
    "ResourceGraphSpecificationRelationship": {
      "type": "object",
      "properties": {
        "relationshipType": {
          "type": "string",
          "description": "Semantic of the relationship."
        },
        "resourceGraph": {
          "description": "A reference to the related resource graph specification.",
          "$ref": "#/definitions/ResourceGraphSpecificationRef"
        }
      },
      "title": "ResourceGraphSpecificationRelationship",
      "description": "Describes link between resource graph specifications."
    },
    "ResourceSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a resource) through video, pictures ...",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "bundledResourceSpecification": {
          "type": "array",
          "description": "A type of ResourceSpecification that belongs to a grouping of ResourceSpecifications made available to the market. It inherits of all attributes of ResourceSpecification.",
          "items": {
            "$ref": "#/definitions/BundledResourceSpecification"
          }
        },
        "category": {
          "type": "string",
          "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "featureSpecification": {
          "type": "array",
          "description": "A list of Features for this specification.",
          "items": {
            "$ref": "#/definitions/FeatureSpecification"
          }
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "pExtension": {
          "description": "ResourceSpecification model has been extended.",
          "$ref": "#/definitions/ResourceSpecificationExtension"
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "resourceSpecRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRelationship"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "targetResourceSchema": {
          "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
          "$ref": "#/definitions/TargetResourceSchema"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceSpecification",
      "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components. A ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification."
    },
    "ResourceSpecificationCharacteristic": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type."
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the ResourceSpecCharacteristic is configurable"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains the CharacteristicSpecification."
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
        },
        "id": {
          "type": "string",
          "description": "Unique ID for the characteristic"
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
        },
        "resourceSpecCharRelationship": {
          "type": "array",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristicRelationship"
          }
        },
        "resourceSpecCharacteristicValue": {
          "type": "array",
          "description": "A ResourceSpecificationCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ResourceSpecificationCharacteristic object. The values of the attributes in the ResourceSpecificationCharacteristicValue object describe the values of the attributes that a corresponding ResourceSpecificationCharacteristic object can take on.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristicValue"
          }
        },
        "validFor": {
          "description": "The period of time for which a characteristic is applicable.",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        }
      },
      "title": "ResourceSpecificationCharacteristic",
      "description": "This class defines the characteristic features of a resource specification. Every ResourceSpecification has a variety of important attributes, methods, constraints, and relationships, which distinguish a resource specification from other resource specifications."
    },
    "ResourceSpecificationCharacteristicRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "characteristicSpecificationId": {
          "type": "string",
          "description": "Unique identifier of the characteristic within the specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the target characteristic within the specification"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
        },
        "resourceSpecificationHref": {
          "type": "string",
          "description": "Hyperlink reference to the resource specification containing the target characteristic"
        },
        "resourceSpecificationId": {
          "type": "string",
          "description": "Unique identifier of the resource specification containing the target characteristic"
        },
        "validFor": {
          "description": "The period for which the object is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "ResourceSpecificationCharacteristicRelationship",
      "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among ResourceSpecificationCharacteristics. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID."
    },
    "ResourceSpecificationCharacteristicValue": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "isDefault": {
          "type": "boolean",
          "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
        },
        "rangeInterval": {
          "type": "string",
          "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
        },
        "regex": {
          "type": "string",
          "description": "A regular expression constraint for given value"
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
        },
        "validFor": {
          "description": "The period of time for which a value is applicable.",
          "$ref": "#/definitions/TimePeriod"
        },
        "value": {
          "type": "string",
          "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
        },
        "valueFrom": {
          "type": "integer",
          "format": "int32",
          "description": "The low range value that a characteristic can take on"
        },
        "valueTo": {
          "type": "integer",
          "format": "int32",
          "description": "The upper range value that a characteristic can take on"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
        }
      },
      "title": "ResourceSpecificationCharacteristicValue",
      "description": "A number or text that can be assigned to a ResourceSpecCharacteristic."
    },
    "ResourceSpecificationExtension": {
      "type": "object",
      "properties": {
        "createInventoryItem": {
          "type": "boolean",
          "description": "createInventoryItem."
        },
        "fulfillmentSpecification": {
          "description": "FulfillmentSpecification.",
          "$ref": "#/definitions/FulfillmentSpecification"
        },
        "fulfillmentSpecificationOperation": {
          "type": "array",
          "description": "fulfillmentSpecificationOperation.",
          "items": {
            "$ref": "#/definitions/FulfillmentSpecificationOperation"
          }
        }
      },
      "title": "ResourceSpecificationExtension"
    },
    "ResourceSpecificationRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Resource Specification version"
        }
      },
      "title": "ResourceSpecificationRef",
      "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components. A ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification."
    },
    "ResourceSpecificationRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "characteristic": {
          "type": "array",
          "description": "A characteristic that refines the relationship. For example, consider the relationship between a slot and a card. For a half-height card it is important to know the position at which the card is inserted, so a characteristic Position might be defined on the relationship to allow capturing of this in the inventory",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationCharacteristic"
          }
        },
        "defaultQuantity": {
          "type": "integer",
          "format": "int32",
          "description": "The default number of the related resource that should be instantiated, for example a rack would typically have 4 cards, although it could support more."
        },
        "href": {
          "type": "string",
          "description": "Reference of the target ResourceSpecification"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of target ResourceSpecification"
        },
        "maximumQuantity": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of the related resource that should be instantiated, for example a rack supports a maximum of 16 cards"
        },
        "minimumQuantity": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of the related resource that should be instantiated, for example a rack must have at least 1 card"
        },
        "name": {
          "type": "string",
          "description": "The name given to the target resource specification instance"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
        },
        "role": {
          "type": "string",
          "description": "The association role for this resource specification"
        },
        "validFor": {
          "description": "The period for which the ResourceSpecRelationship is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "The version given to the target resource specification instance"
        }
      },
      "title": "ResourceSpecificationRelationship",
      "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "className": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "methodName": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      },
      "title": "StackTraceElement"
    },
    "TargetResourceSchema": {
      "type": "object",
      "required": [
        "@schemaLocation",
        "@type"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target resource"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the target resource"
        }
      },
      "title": "TargetResourceSchema",
      "description": "The reference object to the schema and type of target resource which is described by resource specification"
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "localizedMessage": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      },
      "title": "Throwable"
    },
    "TimePeriod": {
      "type": "object",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
        }
      },
      "title": "TimePeriod",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
    }
  }
}