{
  "swagger": "2.0",
  "info": {
    "description": "TMF API Reference : TMF 620 - Product Catalog Management Release : The catalog management API allows the management of the entire lifecycle of the catalog elements, the consultation of catalog elements during several processes such as ordering process, campaign management, sales management. Copyright Â© TM Forum 2019. All Rights Reserved",
    "version": "Version v4 (prepared with Product Catalog Management API REST Specification TMF620 Release 19.0)",
    "title": "Orbitant Product Catalog Management API",
    "contact": {
      "name": "PiA(people in action)",
      "url": "http://www.pia-team.com/",
      "email": "info@pia-team.com"
    },
    "license": {
      "name": "PiA License",
      "url": "http://www.pia-team.com"
    }
  },
  "host": "sprint58-release-test.test.orbitant.dev",
  "basePath": "/api/productCatalogManagement/v4",
  "tags": [
    {
      "name": "Hub Api",
      "description": "Hub Controller"
    },
    {
      "name": "catalog",
      "description": "the Catalog API"
    },
    {
      "name": "category",
      "description": "the Category API"
    },
    {
      "name": "constraint",
      "description": "the Constraint API"
    },
    {
      "name": "exportjob",
      "description": "the ExportJob API"
    },
    {
      "name": "general-controller",
      "description": "General Controller"
    },
    {
      "name": "hub",
      "description": "The Hub API"
    },
    {
      "name": "i-18-n-controller",
      "description": "I 18 N Controller"
    },
    {
      "name": "importjob",
      "description": "the ImportJob API"
    },
    {
      "name": "pla",
      "description": "the PricingLogicAlgorithm API"
    },
    {
      "name": "product",
      "description": "The Product API"
    },
    {
      "name": "productCharacteristic",
      "description": "the ProductCharacteristic API"
    },
    {
      "name": "productOffering",
      "description": "the ProductOffering API"
    },
    {
      "name": "productOfferingPrice",
      "description": "the ProductOfferingPrice API"
    },
    {
      "name": "productSpecification",
      "description": "the ProductSpecification API"
    }
  ],
  "paths": {
    "/catalog": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "List or find Catalog objects",
        "description": "This operation list Catalog entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listCatalog",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Catalog"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "catalog"
        ],
        "summary": "Creates a Catalog",
        "description": "This operation creates Catalog entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createCatalog",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "catalog",
            "description": "The Catalog to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/catalog/{id}": {
      "get": {
        "tags": [
          "catalog"
        ],
        "summary": "Retrieves a Catalog by ID",
        "description": "This operation retrieves Catalog entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrieveCatalog",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Catalog",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "catalog"
        ],
        "summary": "Deletes a Catalog",
        "description": "This operation deletes a Catalog entity.",
        "operationId": "deleteCatalog",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Catalog",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "catalog"
        ],
        "summary": "Updates partially a Catalog",
        "description": "This operation allows partial updates of a catalog entity.",
        "operationId": "patchCatalog",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Catalog",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/category": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "List or find Category objects",
        "description": "This operation list Category entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listCategory",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "category"
        ],
        "summary": "Creates a Category",
        "description": "This operation creates Category entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createCategory",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "category",
            "description": "The Category to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/category/{id}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Retrieves a Category by ID",
        "description": "This operation retrieves Category entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrieveCategory",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "category"
        ],
        "summary": "Deletes a Category",
        "description": "This operation deletes a Category entity.",
        "operationId": "deleteCategory",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "category"
        ],
        "summary": "Updates partially a Category",
        "description": "This operation allows partial updates of a category entity.",
        "operationId": "patchCategory",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/constraint": {
      "get": {
        "tags": [
          "constraint"
        ],
        "summary": "List or find Constraint objects",
        "description": "This operation list Constraint entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listConstraint",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Constraint"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "constraint"
        ],
        "summary": "Creates a Constraint",
        "description": "This operation creates Constraint entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createConstraint",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "constraint",
            "description": "The Constraint to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConstraintCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Constraint"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Constraint"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/constraint/{id}": {
      "get": {
        "tags": [
          "constraint"
        ],
        "summary": "Retrieves a Constraint by ID",
        "description": "This operation retrieves Constraint entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrieveConstraint",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Constraint",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Constraint"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "constraint"
        ],
        "summary": "Deletes a Constraint",
        "description": "This operation deletes a Constraint entity.",
        "operationId": "deleteConstraint",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Constraint",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "constraint"
        ],
        "summary": "Updates partially a Constraint",
        "description": "This operation allows partial updates of a constraint entity. Support of json/merge is mandatory, support of json patch is optional.",
        "operationId": "patchConstraint",
        "consumes": [
          "application/merge-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The Constraint to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConstraintUpdate"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Constraint",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/Constraint"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/exportjob": {
      "get": {
        "tags": [
          "exportjob"
        ],
        "summary": "List or find ExportJob objects",
        "description": "This operation list ExportJob entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listExportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExportJob"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "exportjob"
        ],
        "summary": "Creates a ExportJob",
        "description": "This operation creates ExportJob entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createExportJob",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "exportJob",
            "description": "The ExportJob to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportJobCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/exportjob/{id}": {
      "get": {
        "tags": [
          "exportjob"
        ],
        "summary": "Retrieves a ExportJob by ID",
        "description": "This operation retrieves ExportJob entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrieveExportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ExportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "exportjob"
        ],
        "summary": "Deletes a ExportJob",
        "description": "This operation deletes a ExportJob entity.",
        "operationId": "deleteExportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ExportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/general/channel": {
      "get": {
        "tags": [
          "general-controller"
        ],
        "summary": "getChannels",
        "operationId": "getChannelsUsingGET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/general/marketSegment": {
      "get": {
        "tags": [
          "general-controller"
        ],
        "summary": "getMarketSegments",
        "operationId": "getMarketSegmentsUsingGET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/general/parameters": {
      "get": {
        "tags": [
          "general-controller"
        ],
        "summary": "read",
        "operationId": "readUsingGET",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Parameter"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/hub": {
      "post": {
        "tags": [
          "Hub Api"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "Hub Api"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/i18N": {
      "post": {
        "tags": [
          "i-18-n-controller"
        ],
        "summary": "insert",
        "operationId": "insertUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "entity",
            "description": "entity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/I18NMessageSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/i18N/insertAllMessages": {
      "post": {
        "tags": [
          "i-18-n-controller"
        ],
        "summary": "insertAll",
        "operationId": "insertAllUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "entities",
            "description": "entities",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/I18NMessageSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/importjob": {
      "get": {
        "tags": [
          "importjob"
        ],
        "summary": "List or find ImportJob objects",
        "description": "This operation list ImportJob entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listImportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImportJob"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "importjob"
        ],
        "summary": "Creates a ImportJob",
        "description": "This operation creates ImportJob entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createImportJob",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "importJob",
            "description": "The ImportJob to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportJobCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/importjob/{id}": {
      "get": {
        "tags": [
          "importjob"
        ],
        "summary": "Retrieves a ImportJob by ID",
        "description": "This operation retrieves ImportJob entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrieveImportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ImportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ImportJob"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "importjob"
        ],
        "summary": "Deletes a ImportJob",
        "description": "This operation deletes a ImportJob entity.",
        "operationId": "deleteImportJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ImportJob",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/pla": {
      "get": {
        "tags": [
          "pla"
        ],
        "summary": "List or find PricingLogicAlgorithm objects",
        "description": "This operation list PricingLogicAlgorithm entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listPricingLogicAlgorithm",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PricingLogicAlgorithm"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "pla"
        ],
        "summary": "Creates a PricingLogicAlgorithm",
        "description": "This operation creates PricingLogicAlgorithm entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createPricingLogicAlgorithm",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pla",
            "description": "The PricingLogicAlgorithm to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PricingLogicAlgorithmCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PricingLogicAlgorithm"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PricingLogicAlgorithm"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/pla/{id}": {
      "get": {
        "tags": [
          "pla"
        ],
        "summary": "Retrieves a PricingLogicAlgorithm by ID",
        "description": "This operation retrieves PricingLogicAlgorithm entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrievePricingLogicAlgorithm",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the PricingLogicAlgorithm",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PricingLogicAlgorithm"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "pla"
        ],
        "summary": "Deletes a PricingLogicAlgorithm",
        "description": "This operation deletes a PricingLogicAlgorithm entity.",
        "operationId": "deletePricingLogicAlgorithm",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the PricingLogicAlgorithm",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "pla"
        ],
        "summary": "Updates partially a PricingLogicAlgorithm",
        "description": "This operation allows partial updates of a pla entity.",
        "operationId": "patchPricingLogicAlgorithm_1",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the PricingLogicAlgorithm",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/PricingLogicAlgorithm"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/productCharacteristic": {
      "get": {
        "tags": [
          "productCharacteristic"
        ],
        "summary": "List or find ProductCharacteristic objects",
        "description": "This operation list ProductCharacteristic entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listProductCharacteristic",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductCharacteristic"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "productCharacteristic"
        ],
        "summary": "Creates a ProductCharacteristic",
        "description": "This operation creates ProductCharacteristic entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createProductCharacteristic",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "productCharacteristic",
            "description": "The ProductCharacteristic to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCharacteristicCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductCharacteristic"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProductCharacteristic"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/productCharacteristic/{id}": {
      "get": {
        "tags": [
          "productCharacteristic"
        ],
        "summary": "Retrieves a ProductCharacteristic by ID",
        "description": "This operation retrieves ProductCharacteristic entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrieveProductCharacteristic",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductCharacteristic",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductCharacteristic"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "productCharacteristic"
        ],
        "summary": "Deletes a ProductCharacteristic",
        "description": "This operation deletes a ProductCharacteristic entity.",
        "operationId": "deleteProductCharacteristic",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductCharacteristic",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "productCharacteristic"
        ],
        "summary": "Updates partially a ProductCharacteristic",
        "description": "This operation allows partial updates of a productCharacteristic entity. Support of json/merge is mandatory, support of json patch is optional.",
        "operationId": "patchProductCharacteristic_1",
        "consumes": [
          "application/merge-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ProductCharacteristic to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCharacteristicUpdate"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductCharacteristic",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ProductCharacteristic"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/productOffering": {
      "get": {
        "tags": [
          "productOffering"
        ],
        "summary": "List or find ProductOffering objects",
        "description": "This operation list ProductOffering entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listProductOffering",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductOffering"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "productOffering"
        ],
        "summary": "Creates a ProductOffering",
        "description": "This operation creates ProductOffering entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createProductOffering",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "productOffering",
            "description": "The ProductOffering to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOfferingCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductOffering"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProductOffering"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/productOffering/{id}": {
      "get": {
        "tags": [
          "productOffering"
        ],
        "summary": "Retrieves a ProductOffering by ID",
        "description": "This operation retrieves ProductOffering entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrieveProductOffering",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductOffering",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductOffering"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "productOffering"
        ],
        "summary": "Deletes a ProductOffering",
        "description": "This operation deletes a ProductOffering entity.",
        "operationId": "deleteProductOffering",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductOffering",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "productOffering"
        ],
        "summary": "Updates partially a ProductOffering",
        "description": "This operation allows partial updates of a productOffering entity. Support of json/merge is mandatory, support of json patch is optional.",
        "operationId": "patchProductOffering_1",
        "consumes": [
          "application/merge-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ProductOffering to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOfferingUpdate"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductOffering",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ProductOffering"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/productOfferingPrice": {
      "get": {
        "tags": [
          "productOfferingPrice"
        ],
        "summary": "List or find ProductOfferingPrice objects",
        "description": "This operation list ProductOfferingPrice entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listProductOfferingPrice",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductOfferingPrice"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "productOfferingPrice"
        ],
        "summary": "Creates a ProductOfferingPrice",
        "description": "This operation creates ProductOfferingPrice entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createProductOfferingPrice",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "productOfferingPrice",
            "description": "The ProductOfferingPrice to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOfferingPriceCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductOfferingPrice"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProductOfferingPrice"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/productOfferingPrice/{id}": {
      "get": {
        "tags": [
          "productOfferingPrice"
        ],
        "summary": "Retrieves a ProductOfferingPrice by ID",
        "description": "This operation retrieves ProductOfferingPrice entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrieveProductOfferingPrice",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductOfferingPrice",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductOfferingPrice"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "productOfferingPrice"
        ],
        "summary": "Deletes a ProductOfferingPrice",
        "description": "This operation deletes a ProductOfferingPrice entity.",
        "operationId": "deleteProductOfferingPrice",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductOfferingPrice",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "productOfferingPrice"
        ],
        "summary": "Updates partially a ProductOfferingPrice",
        "description": "This operation allows partial updates of a productOfferingPrice entity. Support of json/merge is mandatory, support of json patch is optional.",
        "operationId": "patchProductOfferingPrice",
        "consumes": [
          "application/merge-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ProductOfferingPrice to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOfferingPriceUpdate"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductOfferingPrice",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ProductOfferingPrice"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/productSpecification": {
      "get": {
        "tags": [
          "productSpecification"
        ],
        "summary": "List or find ProductSpecification objects",
        "description": "This operation list ProductSpecification entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "listProductSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductSpecification"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "productSpecification"
        ],
        "summary": "Creates a ProductSpecification",
        "description": "This operation creates ProductSpecification entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation.",
        "operationId": "createProductSpecification",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "productSpecification",
            "description": "The ProductSpecification to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductSpecificationCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/productSpecification/relatedProdSpecCharacteristics": {
      "post": {
        "tags": [
          "productSpecification"
        ],
        "summary": "Retrieve related product specification characteristics",
        "description": "This operation retrieves related product specification characteristics.",
        "operationId": "retrieveProdSpecCharacteristics",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "entity",
            "description": "entity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductSpecificationCharacteristic"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/productSpecification/{id}": {
      "get": {
        "tags": [
          "productSpecification"
        ],
        "summary": "Retrieves a ProductSpecification by ID",
        "description": "This operation retrieves ProductSpecification entities. Attribute selection is enabled for all first level attributes. Filtering may be available depending on the compliance level supported by an implementation",
        "operationId": "retrieveProductSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductSpecification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "productSpecification"
        ],
        "summary": "Deletes a ProductSpecification",
        "description": "This operation deletes a ProductSpecification entity.",
        "operationId": "deleteProductSpecification",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductSpecification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "productSpecification"
        ],
        "summary": "Updates partially a ProductSpecification",
        "description": "This operation allows partial updates of a productSpecification entity.",
        "operationId": "patchProductSpecification",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductSpecification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AgreementRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "AgreementRef"
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "category": {
          "type": "array",
          "description": "A category list describing the category of the attachment",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the entity"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video,\r\npicture and document."
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a\r\nsubset of URI)."
        },
        "validFor": {
          "description": "A base / value business entity used to represent a\r\nperiod of time between two timepoints.",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "Attachment"
    },
    "BundledProductOffering": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "bundledProductOfferingOption": {
          "description": "A bundled product offer option (BundledProdOfferOption).\r\nA set of numbers that specifies the lower and upper limits\r\nfor a ProductOffering that can be procured as part of the\r\nrelated BundledProductOffering. Values can range from 0\r\nto unbounded.",
          "$ref": "#/definitions/BundledProductOfferingOption"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "BundledProductOffering"
    },
    "BundledProductOfferingOption": {
      "type": "object",
      "properties": {
        "numberRelOfferDefault": {
          "type": "integer",
          "format": "int32",
          "description": "Default number of product offerings that should\r\nbe procured as part of the related BundledProductOffering."
        },
        "numberRelOfferLowerLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Lower limit for a product offering that can be\r\nprocured as part of the related BundledProductOffering"
        },
        "numberRelOfferUpperLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Upper limit for a product offering that can be\r\nprocured as part of the related BundledProductOffering"
        }
      },
      "title": "BundledProductOfferingOption"
    },
    "BundledProductOfferingPriceRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "BundledProductOfferingPriceRelationship"
    },
    "BundledProductSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the entity"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status."
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "BundledProductSpecification"
    },
    "Catalog": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "array",
          "description": "Category reference. The category resource in a product catalog is used to group product",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "relatedParty": {
          "type": "array",
          "description": "A list of related party references (RelatedPartyRef [*]).\r\nA related party defines party or party role linked to a\r\nspecific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "Catalog"
    },
    "CatalogCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "array",
          "description": "List of root categories contained in this catalog",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this catalog",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "validFor": {
          "description": "The period for which the catalog is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "CatalogCreate",
      "description": "A collection of Product Offerings, intended for a specific DistributionChannel, enhanced with additional information such as SLA parameters, invoicing and shipping details Skipped properties: id,href"
    },
    "CatalogUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "array",
          "description": "List of root categories contained in this catalog",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this catalog",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "validFor": {
          "description": "The period for which the catalog is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        }
      },
      "title": "CatalogUpdate",
      "description": "A collection of Product Offerings, intended for a specific DistributionChannel, enhanced with additional information such as SLA parameters, invoicing and shipping details Skipped properties: id,href,lastUpdate"
    },
    "Category": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a\r\nroot of categories"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "parent": {
          "description": " parent category",
          "$ref": "#/definitions/CategoryRef"
        },
        "parentId": {
          "type": "string",
          "description": "Identifier of the parent category"
        },
        "productOffering": {
          "type": "array",
          "description": "A list of product offering references\r\n(ProductOfferingRef [*]). A product offering represents\r\nentities that are orderable from the provider of the\r\ncatalog, this resource includes pricing information.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "subCategory": {
          "type": "array",
          "description": "A list of (sub-)category references (CategoryRef [*]).\r\nThe category resource is used to group product\r\nofferings, service and resource candidates in logical\r\ncontainers. Categories can contain other (sub-\r\n)categories and/or product offerings",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "Category"
    },
    "CategoryCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "id": {
          "type": "string"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "parent": {
          "description": "Version of the parent category",
          "$ref": "#/definitions/CategoryRef"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "productOffering": {
          "type": "array",
          "description": "A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        },
        "subCategory": {
          "type": "array",
          "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings.",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "validFor": {
          "description": "The period for which the category is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "CategoryCreate",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates. Skipped properties: id,href"
    },
    "CategoryRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "CategoryRef"
    },
    "CategoryUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "parentVersion": {
          "type": "string",
          "description": "Version of the parent category"
        },
        "productOffering": {
          "type": "array",
          "description": "A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        },
        "subCategory": {
          "type": "array",
          "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings.",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "validFor": {
          "description": "The period for which the category is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        }
      },
      "title": "CategoryUpdate",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates. Skipped properties: id,href,lastUpdate"
    },
    "ChannelRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ChannelRef"
    },
    "Constraint": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The (class) type of the referred constraint"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "Constraint"
    },
    "ConstraintCreate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The (class) type of the referred constraint"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "description": {
          "type": "string",
          "description": "Description of the constraint"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target constraint"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "the last update time of this constraint"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "the lifecycle status of this constraint"
        },
        "name": {
          "type": "string",
          "description": "Name given to the constraint"
        },
        "validFor": {
          "description": "The period for which the constraint is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ConstraintCreate",
      "description": "Constraint. The Constraint resource represents a policy/rule applied to an entity or entity spec."
    },
    "ConstraintRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ConstraintRef"
    },
    "ConstraintUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The (class) type of the referred constraint"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "description": {
          "type": "string",
          "description": "Description of the constraint"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "the lifecycle status of this constraint"
        },
        "name": {
          "type": "string",
          "description": "Name given to the constraint"
        },
        "validFor": {
          "description": "The period for which the constraint is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "constraint version"
        }
      },
      "title": "ConstraintUpdate",
      "description": "Constraint. The Constraint resource represents a policy/rule applied to an entity or entity spec."
    },
    "EntityRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "EntityRef"
    },
    "Error": {
      "type": "object",
      "properties": {
        "baseType": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "referenceError": {
          "type": "string"
        },
        "schemaLocation": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "Error"
    },
    "EventSubscription": {
      "type": "object",
      "required": [
        "callback",
        "id"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        }
      },
      "title": "EventSubscription",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "EventSubscriptionInput": {
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      },
      "title": "EventSubscriptionInput",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "ExportJob": {
      "type": "object",
      "properties": {
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        },
        "href": {
          "type": "string",
          "description": "Reference of the export job"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the export job"
        },
        "includeRelatedObjects": {
          "type": "string",
          "description": "Used to add the related data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        }
      },
      "title": "ExportJob",
      "description": "Represents a task used to export resources to a file"
    },
    "ExportJobCreate": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        },
        "href": {
          "type": "string",
          "description": "Reference of the export job"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the export job"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)",
          "enum": [
            "Not Started",
            "Running",
            "Succeeded",
            "Failed"
          ]
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        }
      },
      "title": "ExportJobCreate",
      "description": "Represents a task used to export resources to a file Skipped properties: id,href"
    },
    "ExternalReference": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "externalReferenceType": {
          "type": "string",
          "description": "Type of the external reference"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the entity"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ExternalReference"
    },
    "FulfillmentSpecification": {
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "description": "Add FulfillmentSpecification."
        },
        "delete": {
          "type": "string",
          "description": "Delete FulfillmentSpecification."
        },
        "modify": {
          "type": "string",
          "description": "Modify FulfillmentSpecification."
        },
        "modify.Migration": {
          "type": "string",
          "description": "Modify Migration FulfillmentSpecification."
        },
        "modify.Relocation": {
          "type": "string",
          "description": "Modify Relocation FulfillmentSpecification."
        },
        "modify.Takeover": {
          "type": "string",
          "description": "Modify Takeover FulfillmentSpecification."
        },
        "postFlow": {
          "description": "Post Flow FulfillmentSpecification.",
          "$ref": "#/definitions/PostFlow"
        },
        "preFlow": {
          "description": "Pre Flow FulfillmentSpecification.",
          "$ref": "#/definitions/PreFlow"
        },
        "statusChange": {
          "type": "string",
          "description": "Status Change FulfillmentSpecification."
        },
        "statusChange.Resume": {
          "type": "string",
          "description": "Status Change Resume FulfillmentSpecification."
        },
        "statusChange.Suspend": {
          "type": "string",
          "description": "Status Change Suspend FulfillmentSpecification."
        }
      },
      "title": "FulfillmentSpecification"
    },
    "FulfillmentSpecificationOperation": {
      "type": "object",
      "properties": {
        "cancelFlow": {
          "type": "string",
          "description": "Cancel Flow FulfillmentSpecification."
        },
        "operationType": {
          "type": "string",
          "description": "Fulfillment Specification Operation Type."
        },
        "postFlow": {
          "type": "string",
          "description": "Post Flow FulfillmentSpecification."
        },
        "preFlow": {
          "type": "string",
          "description": "Pre Flow FulfillmentSpecification."
        },
        "relatedSpecifications": {
          "type": "array",
          "description": "Relation definition between product specifications.",
          "items": {
            "$ref": "#/definitions/RelatedSpecification"
          }
        }
      },
      "title": "FulfillmentSpecificationOperation"
    },
    "I18NMessageSource": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "httpStatus": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "msgType": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "I18NMessageSource"
    },
    "ImportJob": {
      "type": "object",
      "properties": {
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        },
        "href": {
          "type": "string",
          "description": "Reference of the import job"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the import job"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        }
      },
      "title": "ImportJob",
      "description": "Represents a task used to import resources from a file"
    },
    "ImportJobCreate": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        },
        "href": {
          "type": "string",
          "description": "Reference of the import job"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the import job"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)",
          "enum": [
            "Not Started",
            "Running",
            "Succeeded",
            "Failed"
          ]
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        }
      },
      "title": "ImportJobCreate",
      "description": "Represents a task used to import resources from a file Skipped properties: id,href"
    },
    "InstallmentPlan": {
      "type": "object",
      "properties": {
        "installmentCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times to repeat the application of the installment"
        },
        "periodLength": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the period of the installment together with periodType... set to zero if not applicable"
        },
        "periodType": {
          "type": "string",
          "description": "Defines the period of the installment together with periodLength... can be month, week ...etc"
        }
      },
      "title": "InstallmentPlan",
      "description": "The installment plan for the payment"
    },
    "MarketSegmentRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "MarketSegmentRef"
    },
    "Money": {
      "type": "object",
      "properties": {
        "unit": {
          "type": "string",
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency)."
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A positive floating point number."
        }
      },
      "title": "Money"
    },
    "OfferingFulfillmentOperation": {
      "type": "object",
      "properties": {
        "operationType": {
          "type": "string",
          "description": "Offering Fulfillment Operation Type."
        },
        "postFlow": {
          "type": "string",
          "description": "Offering Fulfillment Post Flow."
        },
        "preFlow": {
          "type": "string",
          "description": "Offering Fulfillment Pre Flow."
        },
        "relatedOfferings": {
          "type": "array",
          "description": "Relation definiton between offerings.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        },
        "relation": {
          "type": "string",
          "description": "Relation definiton between offerings."
        }
      },
      "title": "OfferingFulfillmentOperation"
    },
    "Parameter": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "title": "Parameter"
    },
    "PlaceRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "PlaceRef"
    },
    "PostFlow": {
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "description": "Add FulfillmentSpecification."
        },
        "delete": {
          "type": "string",
          "description": "Delete FulfillmentSpecification."
        },
        "modify": {
          "type": "string",
          "description": "Modify FulfillmentSpecification."
        },
        "modify.Migration": {
          "type": "string",
          "description": "Modify Migration FulfillmentSpecification."
        },
        "modify.Relocation": {
          "type": "string",
          "description": "Modify Relocation FulfillmentSpecification."
        },
        "modify.Takeover": {
          "type": "string",
          "description": "Modify Takeover FulfillmentSpecification."
        },
        "statusChange": {
          "type": "string",
          "description": "Status Change FulfillmentSpecification."
        },
        "statusChange.Resume": {
          "type": "string",
          "description": "Status Change Resume FulfillmentSpecification."
        },
        "statusChange.Suspend": {
          "type": "string",
          "description": "Status Change Suspend FulfillmentSpecification."
        }
      },
      "title": "PostFlow"
    },
    "PreFlow": {
      "type": "object",
      "properties": {
        "add": {
          "type": "string",
          "description": "Add FulfillmentSpecification."
        },
        "delete": {
          "type": "string",
          "description": "Delete FulfillmentSpecification."
        },
        "modify": {
          "type": "string",
          "description": "Modify FulfillmentSpecification."
        },
        "modify.Migration": {
          "type": "string",
          "description": "Modify Migration FulfillmentSpecification."
        },
        "modify.Relocation": {
          "type": "string",
          "description": "Modify Relocation FulfillmentSpecification."
        },
        "modify.Takeover": {
          "type": "string",
          "description": "Modify Takeover FulfillmentSpecification."
        },
        "statusChange": {
          "type": "string",
          "description": "Status Change FulfillmentSpecification."
        },
        "statusChange.Resume": {
          "type": "string",
          "description": "Status Change Resume FulfillmentSpecification."
        },
        "statusChange.Suspend": {
          "type": "string",
          "description": "Status Change Suspend FulfillmentSpecification."
        }
      },
      "title": "PreFlow"
    },
    "PricingLogicAlgorithm": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "plaSpecId": {
          "type": "string",
          "description": "id of corresponding PricingLogicAlgorithm specification"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "PricingLogicAlgorithm"
    },
    "PricingLogicAlgorithmCreate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "description": {
          "type": "string",
          "description": "Description of the PricingLogicAlgorithm"
        },
        "href": {
          "type": "string",
          "description": "hyperlink reference of this PricingLogicAlgorithm"
        },
        "id": {
          "type": "string",
          "description": "unique id of the PricingLogicAlgorithm"
        },
        "name": {
          "type": "string",
          "description": "Name given to the PricingLogicAlgorithm"
        },
        "plaSpecId": {
          "type": "string",
          "description": "id of corresponding PricingLogicAlgorithm specification"
        },
        "validFor": {
          "description": "The period for which the PricingLogicAlgorithm is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "PricingLogicAlgorithmCreate"
    },
    "PricingLogicAlgorithmUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "description": {
          "type": "string",
          "description": "Description of the PricingLogicAlgorithm"
        },
        "name": {
          "type": "string",
          "description": "Name given to the PricingLogicAlgorithm"
        },
        "plaSpecId": {
          "type": "string",
          "description": "id of corresponding PricingLogicAlgorithm specification"
        },
        "validFor": {
          "description": "The period for which the PricingLogicAlgorithm is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "PricingLogicAlgorithmUpdate"
    },
    "ProductCharacteristic": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "description": "Category of the characteristic",
          "$ref": "#/definitions/CategoryRef"
        },
        "characteristicType": {
          "type": "string"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, it indicates that the  ProductCharacteristic value can be configured at  run time by a consumer that uses the catalog to place  an order or change product in product inventory."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for  the characteristic can be extended by adding new  values when instantiating a characteristic for a product.."
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is  unique for the specification. Possible values are;  \"unique while value is in effectand unique whether value is in effect or not "
        },
        "isVisible": {
          "type": "boolean",
          "description": "Shows entered fields can be seen or not"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "mandatory": {
          "type": "boolean",
          "description": "Fields are mandatory or not"
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a  CharacteristicValue can take on"
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a  CharacteristicValue can take on"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "productCharacteristicValue": {
          "type": "array",
          "description": "A list of product characteristic values  (ProductCharacteristicValue [*]). A number or text  that can be assigned to a ProductCharacteristic.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValue"
          }
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular  expression used to derive the value of a characteristiC value."
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the  schema describing the value type"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can  take on, such as numeric, text and so forth."
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductCharacteristic"
    },
    "ProductCharacteristicCreate": {
      "type": "object",
      "required": [
        "valueType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "category": {
          "description": "Category of the characteristic",
          "$ref": "#/definitions/CategoryRef"
        },
        "characteristicType": {
          "type": "string"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, it indicates that the  ProductCharacteristic value can be configured at  run time by a consumer that uses the catalog to place  an order or change product in product inventory."
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for  the characteristic can be extended by adding new  values when instantiating a characteristic for a product.."
        },
        "id": {
          "type": "string"
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is  unique for the specification. Possible values are;  \"unique while value is in effectand unique whether value is in effect or not "
        },
        "isVisible": {
          "type": "boolean",
          "description": "Shows entered fields can be seen or not"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "mandatory": {
          "type": "boolean",
          "description": "Fields are mandatory or not"
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a  CharacteristicValue can take on"
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a  CharacteristicValue can take on"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "productCharacteristicValue": {
          "type": "array",
          "description": "A list of product characteristic values  (ProductCharacteristicValue [*]). A number or text  that can be assigned to a ProductCharacteristic.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValue"
          }
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular  expression used to derive the value of a characteristiC value."
        },
        "revision": {
          "type": "integer",
          "format": "int64"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the  schema describing the value type"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can  take on, such as numeric, text and so forth."
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductCharacteristicCreate"
    },
    "ProductCharacteristicUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "category": {
          "description": "Category of the characteristic",
          "$ref": "#/definitions/CategoryRef"
        },
        "characteristicType": {
          "type": "string"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, it indicates that the  ProductCharacteristic value can be configured at  run time by a consumer that uses the catalog to place  an order or change product in product inventory."
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for  the characteristic can be extended by adding new  values when instantiating a characteristic for a product.."
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is  unique for the specification. Possible values are;  \"unique while value is in effectand unique whether value is in effect or not "
        },
        "isVisible": {
          "type": "boolean",
          "description": "Shows entered fields can be seen or not"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "mandatory": {
          "type": "boolean",
          "description": "Fields are mandatory or not"
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a  CharacteristicValue can take on"
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a  CharacteristicValue can take on"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "productCharacteristicValue": {
          "type": "array",
          "description": "A list of product characteristic values  (ProductCharacteristicValue [*]). A number or text  that can be assigned to a ProductCharacteristic.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValue"
          }
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular  expression used to derive the value of a characteristiC value."
        },
        "revision": {
          "type": "integer",
          "format": "int64"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the  schema describing the value type"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can  take on, such as numeric, text and so forth."
        },
        "version": {
          "type": "string",
          "description": "Version entity"
        }
      },
      "title": "ProductCharacteristicUpdate"
    },
    "ProductOffering": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "agreement": {
          "type": "array",
          "description": "A list of agreement references (AgreementRef [*]). An\r\nagreement represents a contract or arrangement, either written\r\nor verbal and sometimes enforceable by law, such as a service\r\nlevel agreement or a customer price agreement. An agreement\r\ninvolves a number of other business entities, such as products,\r\nservices, and resources and/or their specifications.",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "attachment": {
          "type": "array",
          "description": "A list of attachments (Attachment [*]). Complements the\r\ndescription of an element (for instance a product) through video,\r\npictures...",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "description": "A list of bundled product offerings (BundledProductOffering [*]).\r\nA type of ProductOffering that belongs to a grouping of\r\nProductOfferings made available to the market. It inherits of all\r\nattributes of ProductOffering.",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        },
        "category": {
          "type": "array",
          "description": "A list of category references (CategoryRef [*]). The category\r\nresource is used to group product offerings, service and\r\nresource candidates in logical containers. Categories can\r\ncontain other categories and/or product offerings, resource or\r\nservice candidates.",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "channel": {
          "type": "array",
          "description": "A list of channel references (ChannelRef [*]). The channel\r\ndefines the channel for selling product offerings.",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "Bundle determines whether a productOffering\r\nrepresents a single productOffering (false), or a bundle of\r\nproductOfferings (true)."
        },
        "isSellable": {
          "type": "boolean",
          "description": "A link to the schema describing this product offering."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "marketSegment": {
          "type": "array",
          "description": "A list of market segment references (MarketSegmentRef [*]).\r\nprovides references to the corresponding market segment as\r\ntarget of product offerings. A market segment is grouping of\r\nParties, GeographicAreas, SalesChannels, and so forth.",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "pExtension": {
          "$ref": "#/definitions/ProductOfferingExtension"
        },
        "place": {
          "type": "array",
          "description": "A list of place references (PlaceRef [*]). Place defines the\r\nplaces where the products are sold or delivered.",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "description": "A list of prod spec char value uses (ProdSpecCharValueUse\r\n[*]). A use of the ProdSpecCharacteristicValue by a\r\nProductOffering to which additional properties (attributes) apply\r\nor override the properties of similar properties contained in\r\nProdSpecCharacteristicValue. It should be noted that\r\ncharacteristics which their value(s) addressed by this object\r\nmust exist in corresponding product specification. The available\r\ncharacteristic values for a ProductSpecCharacteristic in a\r\nProduct specification can be modified at the ProductOffering\r\nlevel. For example, a characteristic 'Color' might have values\r\nWhite, Blue, Green, and Red. But, the list of values can be\r\nrestricted to e.g. White and Blue in an associated product\r\noffering. It should be noted that the list of values in\r\n'ProdSpecCharValueUse' is a strict subset of the list of values\r\nas defined in the corresponding product specification\r\ncharacteristics.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValueUse"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "description": "A list of product offering prices (ProductOfferingPrice [*]). An\r\namount, usually of money, that is asked for or allowed when a\r\nProductOffering is bought, rented, or leased. The price is valid\r\nfor a defined period of time and may not represent the actual\r\nprice paid by a customer. It should be noted that a product\r\noffering price can be created directly via Product Offering Price\r\nresource as well. However, some product offering price sub-resources may not be exposed thru Product Offering resource.",
          "items": {
            "$ref": "#/definitions/ProductOfferingPriceRef"
          }
        },
        "productOfferingRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among product offerings.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRelationship"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "description": "A list of product offering terms (ProductOfferingTerm [*]). A\r\ncondition under which a ProductOffering is made available to\r\nCustomers. For instance, a productOffering can be offered with\r\nmultiple commitment periods..",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "productSpecification": {
          "description": "(ProductSpecificationRef). A\r\nProductSpecification is a detailed description of a tangible or\r\nintangible object made available externally in the form of a ProductOffering",
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "relatedParty": {
          "type": "array",
          "description": "A list of related party references (RelatedPartyRef [*]).\r\nA related party defines party or party role linked to a\r\nspecific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCandidate": {
          "description": "resource candidate is an entity that makes a\r\nResourceSpecification available to a catalog.",
          "$ref": "#/definitions/ResourceCandidateRef"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "serviceCandidate": {
          "description": "A service candidate reference (ServiceCandidateRef).\r\nServiceCandidate is an entity that makes a ServiceSpecification\r\navailable to a catalog.",
          "$ref": "#/definitions/ServiceCandidateRef"
        },
        "serviceLevelAgreement": {
          "description": "A SLA reference (SLARef). ServiceLevelAgreement reference:\r\nA service level agreement (SLA) is a type of agreement that\r\nrepresents a formal negotiated agreement between two parties\r\ndesigned to create a common understanding about products,\r\nservices, priorities, responsibilities, and so forth. The SLA is a\r\nset of appropriate procedures and targets formally or informally\r\nagreed between parties in order to achieve and maintain\r\nspecified Quality of Service.",
          "$ref": "#/definitions/SLARef"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductOffering"
    },
    "ProductOfferingCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "agreement": {
          "type": "array",
          "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a product) through video, pictures...",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        },
        "category": {
          "type": "array",
          "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "channel": {
          "type": "array",
          "description": "The channel defines the channel for selling product offerings.",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the productOffering"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
        },
        "isSellable": {
          "type": "boolean",
          "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "marketSegment": {
          "type": "array",
          "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the productOffering"
        },
        "pExtension": {
          "$ref": "#/definitions/ProductOfferingExtension"
        },
        "place": {
          "type": "array",
          "description": "Place defines the places where the products are sold or delivered.",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValueUse"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.",
          "items": {
            "$ref": "#/definitions/ProductOfferingPriceRef"
          }
        },
        "productOfferingRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among product offerings.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRelationship"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "productSpecification": {
          "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this catalog",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCandidate": {
          "description": "A resource candidate is an entity that makes a ResourceSpecification available to a catalog.",
          "$ref": "#/definitions/ResourceCandidateRef"
        },
        "serviceCandidate": {
          "description": "ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.",
          "$ref": "#/definitions/ServiceCandidateRef"
        },
        "serviceLevelAgreement": {
          "description": "A service level agreement (SLA) is a type of agreement that represents a formal negotiated agreement between two parties designed to create a common understanding about products, services, priorities, responsibilities, and so forth. The SLA is a set of appropriate procedures and targets formally or informally agreed between parties in order to achieve and maintain specified Quality of Service.",
          "$ref": "#/definitions/SLARef"
        },
        "validFor": {
          "description": "The period for which the productOffering is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductOfferingCreate",
      "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information. Skipped properties: id,href"
    },
    "ProductOfferingExtension": {
      "type": "object",
      "properties": {
        "offeringFulfillmentOperation": {
          "type": "array",
          "description": "offeringFulfillmentOperation.",
          "items": {
            "$ref": "#/definitions/OfferingFulfillmentOperation"
          }
        }
      },
      "title": "ProductOfferingExtension"
    },
    "ProductOfferingPrice": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "bundledPopRelationship": {
          "type": "array",
          "description": "this object represents a bundle relationship from a bundle product offering price (parent) to a simple product offering price (child). A simple product offering price may participate in more than one bundle relationship.",
          "items": {
            "$ref": "#/definitions/BundledProductOfferingPriceRelationship"
          }
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "constraint": {
          "type": "array",
          "description": "The Constraint resource represents a policy/rule applied to ProductOfferingPrice.",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "installmentPlan": {
          "description": "The installment plan for the payment",
          "$ref": "#/definitions/InstallmentPlan"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this ProductOfferingPrice is composite (bundle) or not"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "marketSegment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProductOfferPriceAlteration (Discount)"
        },
        "place": {
          "type": "array",
          "description": "Place defines the places where the products are sold or delivered.",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "popRelationship": {
          "type": "array",
          "description": "Product Offering Prices related to this Product Offering Price, for example a price alteration such as allowance or discount",
          "items": {
            "$ref": "#/definitions/ProductOfferingPriceRelationship"
          }
        },
        "price": {
          "description": "The amount of money that characterizes the price.",
          "$ref": "#/definitions/Money"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "description": "The PricingLogicAlgorithm entity represents an instantiation of an interface specification to external rating function (without a modeled behavior in SID). Some of the parameters of the interface definition may be already set (such as price per unit) and some may be gathered during the rating process from the event (such as call duration) or from ProductCharacteristicValues (such as assigned bandwidth).",
          "items": {
            "$ref": "#/definitions/PricingLogicAlgorithm"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOfferingPrice to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering and ProcuctOfferingPrice level. The list of values in ProductSpecificationCharacteristicValueUse is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValueUse"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "description": "A list of conditions under which a ProductOfferingPrice is made available to Customers. For instance, a Product Offering Price can be offered with multiple commitment periods.",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "format": "int32",
          "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "The period to repeat the application of the price Could be month, week..."
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "tax": {
          "type": "array",
          "description": "An amount of money levied on the price of a Product by a legislative body.",
          "items": {
            "$ref": "#/definitions/TaxItem"
          }
        },
        "unitOfMeasure": {
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount.",
          "$ref": "#/definitions/Quantity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductOfferingPrice"
    },
    "ProductOfferingPriceCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "the immediate base class type of this product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this resource"
        },
        "@type": {
          "type": "string",
          "description": "The class type of this Product offering"
        },
        "bundledPopRelationship": {
          "type": "array",
          "description": "this object represents a bundle relationship from a bundle product offering price (parent) to a simple product offering price (child). A simple product offering price may participate in more than one bundle relationship.",
          "items": {
            "$ref": "#/definitions/BundledProductOfferingPriceRelationship"
          }
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "constraint": {
          "type": "array",
          "description": "The Constraint resource represents a policy/rule applied to ProductOfferingPrice.",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingPrice"
        },
        "id": {
          "type": "string"
        },
        "installmentPlan": {
          "description": "The installment plan for the payment",
          "$ref": "#/definitions/InstallmentPlan"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this ProductOfferingPrice is composite (bundle) or not"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "the last update time of this ProductOfferingPrice"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "the lifecycle status of this ProductOfferingPrice"
        },
        "marketSegment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the productOfferingPrice"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProductOfferPriceAlteration (Discount)"
        },
        "place": {
          "type": "array",
          "description": "Place defines the places where the products are sold or delivered.",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "popRelationship": {
          "type": "array",
          "description": "Product Offering Prices related to this Product Offering Price, for example a price alteration such as allowance or discount",
          "items": {
            "$ref": "#/definitions/ProductOfferingPriceRelationship"
          }
        },
        "price": {
          "description": "The amount of money that characterizes the price.",
          "$ref": "#/definitions/Money"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "description": "The PricingLogicAlgorithm entity represents an instantiation of an interface specification to external rating function (without a modeled behavior in SID). Some of the parameters of the interface definition may be already set (such as price per unit) and some may be gathered during the rating process from the event (such as call duration) or from ProductCharacteristicValues (such as assigned bandwidth).",
          "items": {
            "$ref": "#/definitions/PricingLogicAlgorithm"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOfferingPrice to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering and ProcuctOfferingPrice level. The list of values in ProductSpecificationCharacteristicValueUse is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValueUse"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "description": "A list of conditions under which a ProductOfferingPrice is made available to Customers. For instance, a Product Offering Price can be offered with multiple commitment periods.",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "format": "int32",
          "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "The period to repeat the application of the price Could be month, week..."
        },
        "tax": {
          "type": "array",
          "description": "An amount of money levied on the price of a Product by a legislative body.",
          "items": {
            "$ref": "#/definitions/TaxItem"
          }
        },
        "unitOfMeasure": {
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount.",
          "$ref": "#/definitions/Quantity"
        },
        "validFor": {
          "description": "The period for which the productOfferingPrice is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductOfferingPriceCreate",
      "description": "Is based on both the basic cost to develop and produce products and the enterprises policy on revenue targets. This price may be further revised through discounting (productOfferPriceAlteration). The price, applied for a productOffering may also be influenced by the productOfferingTerm, the customer selected, eg: a productOffering can be offered with multiple terms, like commitment periods for the contract. The price may be influenced by this productOfferingTerm. A productOffering may be cheaper with a 24 month commitment than with a 12 month commitment. Skipped properties: id,href"
    },
    "ProductOfferingPriceRef": {
      "type": "object",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductOfferingPriceRef"
    },
    "ProductOfferingPriceRelationship": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "relationshipType": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductOfferingPriceRelationship"
    },
    "ProductOfferingPriceUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "the immediate base class type of this product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this resource"
        },
        "@type": {
          "type": "string",
          "description": "The class type of this Product offering"
        },
        "bundledPopRelationship": {
          "type": "array",
          "description": "this object represents a bundle relationship from a bundle product offering price (parent) to a simple product offering price (child). A simple product offering price may participate in more than one bundle relationship.",
          "items": {
            "$ref": "#/definitions/BundledProductOfferingPriceRelationship"
          }
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "constraint": {
          "type": "array",
          "description": "The Constraint resource represents a policy/rule applied to ProductOfferingPrice.",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingPrice"
        },
        "installmentPlan": {
          "description": "The installment plan for the payment",
          "$ref": "#/definitions/InstallmentPlan"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this ProductOfferingPrice is composite (bundle) or not"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "the lifecycle status of this ProductOfferingPrice"
        },
        "marketSegment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the productOfferingPrice"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProductOfferPriceAlteration (Discount)"
        },
        "place": {
          "type": "array",
          "description": "Place defines the places where the products are sold or delivered.",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "popRelationship": {
          "type": "array",
          "description": "Product Offering Prices related to this Product Offering Price, for example a price alteration such as allowance or discount",
          "items": {
            "$ref": "#/definitions/ProductOfferingPriceRelationship"
          }
        },
        "price": {
          "description": "The amount of money that characterizes the price.",
          "$ref": "#/definitions/Money"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "description": "The PricingLogicAlgorithm entity represents an instantiation of an interface specification to external rating function (without a modeled behavior in SID). Some of the parameters of the interface definition may be already set (such as price per unit) and some may be gathered during the rating process from the event (such as call duration) or from ProductCharacteristicValues (such as assigned bandwidth).",
          "items": {
            "$ref": "#/definitions/PricingLogicAlgorithm"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOfferingPrice to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering and ProcuctOfferingPrice level. The list of values in ProductSpecificationCharacteristicValueUse is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValueUse"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "description": "A list of conditions under which a ProductOfferingPrice is made available to Customers. For instance, a Product Offering Price can be offered with multiple commitment periods.",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "format": "int32",
          "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "The period to repeat the application of the price Could be month, week..."
        },
        "tax": {
          "type": "array",
          "description": "An amount of money levied on the price of a Product by a legislative body.",
          "items": {
            "$ref": "#/definitions/TaxItem"
          }
        },
        "unitOfMeasure": {
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount.",
          "$ref": "#/definitions/Quantity"
        },
        "validFor": {
          "description": "The period for which the productOfferingPrice is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        }
      },
      "title": "ProductOfferingPriceUpdate",
      "description": "Is based on both the basic cost to develop and produce products and the enterprises policy on revenue targets. This price may be further revised through discounting (productOfferPriceAlteration). The price, applied for a productOffering may also be influenced by the productOfferingTerm, the customer selected, eg: a productOffering can be offered with multiple terms, like commitment periods for the contract. The price may be influenced by this productOfferingTerm. A productOffering may be cheaper with a 24 month commitment than with a 12 month commitment. Skipped properties: id,href,lastUpdate"
    },
    "ProductOfferingRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductOfferingRef"
    },
    "ProductOfferingRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
        },
        "validFor": {
          "description": "The period for which the\r\nproductOfferingRelationship is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductOfferingRelationship"
    },
    "ProductOfferingTerm": {
      "type": "object",
      "properties": {
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingTerm."
        },
        "duration": {
          "description": "Duration of the productOfferingTerm",
          "$ref": "#/definitions/Quantity"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "validFor": {
          "description": "The period for which the productOfferingterm is valid.",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "ProductOfferingTerm"
    },
    "ProductOfferingUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "agreement": {
          "type": "array",
          "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a product) through video, pictures...",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        },
        "category": {
          "type": "array",
          "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "channel": {
          "type": "array",
          "description": "The channel defines the channel for selling product offerings.",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the productOffering"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
        },
        "isSellable": {
          "type": "boolean",
          "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "marketSegment": {
          "type": "array",
          "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the productOffering"
        },
        "pExtension": {
          "$ref": "#/definitions/ProductOfferingExtension"
        },
        "place": {
          "type": "array",
          "description": "Place defines the places where the products are sold or delivered.",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValueUse"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.",
          "items": {
            "$ref": "#/definitions/ProductOfferingPriceRef"
          }
        },
        "productOfferingRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among product offerings.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRelationship"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "productSpecification": {
          "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "relatedParty": {
          "type": "array",
          "description": "List of parties involved in this catalog",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCandidate": {
          "description": "A resource candidate is an entity that makes a ResourceSpecification available to a catalog.",
          "$ref": "#/definitions/ResourceCandidateRef"
        },
        "serviceCandidate": {
          "description": "ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.",
          "$ref": "#/definitions/ServiceCandidateRef"
        },
        "serviceLevelAgreement": {
          "description": "A service level agreement (SLA) is a type of agreement that represents a formal negotiated agreement between two parties designed to create a common understanding about products, services, priorities, responsibilities, and so forth. The SLA is a set of appropriate procedures and targets formally or informally agreed between parties in order to achieve and maintain specified Quality of Service.",
          "$ref": "#/definitions/SLARef"
        },
        "validFor": {
          "description": "The period for which the productOffering is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        }
      },
      "title": "ProductOfferingUpdate",
      "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information. Skipped properties: id,href,lastUpdate"
    },
    "ProductSpecification": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "A list of attachments (Attachment [*]). Complements the\r\ndescription of an element (for instance a product)\r\nthrough video, pictures..",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification."
        },
        "bundledProductSpecification": {
          "type": "array",
          "description": "A list of bundled product specifications\r\n(BundledProductSpecification [*]). A type of\r\nProductSpecification that belongs to a grouping of\r\nProductSpecifications made available to the market. It\r\ninherits of all attributes of ProductSpecification.",
          "items": {
            "$ref": "#/definitions/BundledProductSpecification"
          }
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "description": {
          "type": "string",
          "description": "Description of this entity"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "Bundle determines whether a\r\nproductSpecification represents a single (false),or a bundle (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status "
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "pExtension": {
          "$ref": "#/definitions/ProductSpecificationExtension"
        },
        "productNumber": {
          "type": "string",
          "description": "An identification number assigned to uniquely\r\nidentity the specification"
        },
        "productSpecCharacteristic": {
          "type": "array",
          "description": " A list of product spec characteristics\r\n(ProductSpecCharacteristic [*]). A characteristic quality\r\nor distinctive feature of a ProductSpecification. The\r\ncharacteristic can be take on a discrete value, such as\r\ncolor, can take on a range of values, (for example,\r\nsensitivity of 100-240 mV), or can be derived from a\r\nformula (for example, usage time (hrs) = 30 - talk time*3). Certain characteristics, such as color, may be\r\nconfigured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristic"
          }
        },
        "productSpecificationRelationship": {
          "type": "array",
          "description": "A list of product specification relationships\r\n(ProductSpecificationRelationship [*]). A migration,\r\nsubstitution, dependency or exclusivity relationship\r\nbetween/among product specifications.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationRelationship"
          }
        },
        "relatedParty": {
          "type": "array",
          "description": "A list of related party references (RelatedPartyRef [*]).\r\nA related party defines party or party role linked to a\r\nspecific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "description": "A list of resource specification references\r\n(ResourceSpecificationRef [*]). The\r\nResourceSpecification is required to realize a\r\nProductSpecification.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRef"
          }
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "serviceSpecification": {
          "type": "array",
          "description": "A list of service specification references\r\n(ServiceSpecificationRef [*]). ServiceSpecification(s)\r\nrequired to realize a ProductSpecification.",
          "items": {
            "$ref": "#/definitions/ServiceSpecificationRef"
          }
        },
        "targetProductSchema": {
          "description": "The reference object to the schema and type of target product which is described by product specification.",
          "$ref": "#/definitions/TargetProductSchema"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "validFor": {
          "description": "The period for which the entity is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductSpecification"
    },
    "ProductSpecificationCharacteristic": {
      "type": "object",
      "properties": {
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "category": {
          "type": "array",
          "description": "Category of the characteristic",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "characteristicType": {
          "type": "string",
          "description": "Characteristic value type such as simple, choice, range"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, it indicates that the\r\nproductSpecCharacteristic value can be configured at\r\nrun time by a consumer that uses the catalog to place\r\nan order or change product in product inventory."
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the productSpecCharacteristic is."
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for\r\nthe characteristic can be extended by adding new\r\nvalues when instantiating a characteristic for a product.."
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a Characteristic entity."
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is\r\nunique for the specification. Possible values are;\r\n\"unique while value is in effectand unique whether value is in effect or not "
        },
        "isVisible": {
          "type": "boolean",
          "description": "Shows entered fields can be seen or not"
        },
        "mandatory": {
          "type": "boolean",
          "description": "Fields are mandatory or not"
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a\r\nCharacteristicValue can take on"
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a\r\nCharacteristicValue can take on"
        },
        "name": {
          "type": "string",
          "description": "Name of the associated productSpecCharacteristic."
        },
        "productSpecCharRelationship": {
          "type": "array",
          "description": "A list of product spec char relationships\r\n(ProductSpecCharRelationship [*]). An aggregation,migration, substitution, dependency or exclusivity\r\nrelationship between/among\r\nproductSpecCharacteristics. ",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicRelationship"
          }
        },
        "productSpecCharacteristicValue": {
          "type": "array",
          "description": "A list of product spec characteristic values\r\n(ProductSpecificationCharacteristicValue [*]). A number or text\r\nthat can be assigned to a ProductSpecCharacteristic.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValue"
          }
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular\r\nexpression used to derive the value of a characteristiC value."
        },
        "validFor": {
          "description": "The period for which the productSpecCharacteristic is valid.",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic value can\r\ntake on, such as numeric, text and so forth."
        }
      },
      "title": "ProductSpecificationCharacteristic"
    },
    "ProductSpecificationCharacteristicRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "charSpecSeq": {
          "type": "integer",
          "format": "int32",
          "description": "The order in which a CharacteristicSpecification appears\r\nwithin another CharacteristicSpecification that defines a grouping of\r\nCharacteristicSpecifications."
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "relationshipType": {
          "type": "string"
        },
        "validFor": {
          "description": "The period for which the\r\nproductSpecCharRelationship is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductSpecificationCharacteristicRelationship"
    },
    "ProductSpecificationCharacteristicValue": {
      "type": "object",
      "properties": {
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "isDefault": {
          "type": "boolean",
          "description": "Indicates if the value is the default value for a\r\ncharacteristic."
        },
        "rangeInterval": {
          "type": "string",
          "description": "An indicator that specifies the inclusion or exclusion of the\r\nvalueFrom and valueTo attributes. If applicable, possible values are\r\n\"open\", \"closed\", \"closedBottom\" and \"closedTop\""
        },
        "regex": {
          "type": "string",
          "description": "Regular expression to define constraint on the allowed\r\nvalue"
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB"
        },
        "validFor": {
          "description": "The period of time for which a value is applicable",
          "$ref": "#/definitions/TimePeriod"
        },
        "value": {
          "type": "string",
          "description": "A discrete value that the characteristic can take on. The type of\r\nvalue is determined by âvalueTypeâ characteristic."
        },
        "valueFrom": {
          "type": "string",
          "description": "The low range value that a characteristic can take on."
        },
        "valueTo": {
          "type": "string",
          "description": "The upper range value that a characteristic can take on."
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as\r\nnumeric, text, and so forth."
        }
      },
      "title": "ProductSpecificationCharacteristicValue"
    },
    "ProductSpecificationCharacteristicValueUse": {
      "type": "object",
      "properties": {
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "category": {
          "type": "array",
          "description": "Category of the characteristic",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "characteristicType": {
          "type": "string",
          "description": "Characteristic value type such as simple, choice, range"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, it indicates that the\r\nproductSpecCharacteristic value can be configured at\r\nrun time by a consumer that uses the catalog to place\r\nan order or change product in product inventory."
        },
        "description": {
          "type": "string",
          "description": "Description of the char value use"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a Characteristic entity."
        },
        "isVisible": {
          "type": "boolean",
          "description": "Shows entered fields can be seen or not"
        },
        "mandatory": {
          "type": "boolean",
          "description": "Fields are mandatory or not"
        },
        "maxCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of instances a\r\nCharacteristicValue can take on. For example, zero to\r\nfive phone numbers in a group calling plan, where five is\r\nthe value for the maxCardinality."
        },
        "minCardinality": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of instances a\r\nCharacteristicValue can take on. For example, zero to\r\nfive phone numbers in a group calling plan, where zero\r\nis the value for the minCardinality."
        },
        "name": {
          "type": "string",
          "description": "Name of the char value use"
        },
        "productSpecCharacteristicValue": {
          "type": "array",
          "description": "A list of product spec characteristic values\r\n(ProductSpecCharacteristicValue [1..*]). A number or\r\ntext that can be assigned to a\r\nProductSpecCharacteristic.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristicValue"
          }
        },
        "productSpecification": {
          "description": "A product specification reference\r\n(ProductSpecificationRef). A ProductSpecification is a\r\ndetailed description of a tangible or intangible object\r\nmade available externally in the form of a\r\nProductOffering to customers or other parties playing a\r\nparty role.",
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "validFor": {
          "description": "The period for which the value is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        }
      },
      "title": "ProductSpecificationCharacteristicValueUse"
    },
    "ProductSpecificationCreate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a product) through video, pictures...",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification"
        },
        "bundledProductSpecification": {
          "type": "array",
          "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification.",
          "items": {
            "$ref": "#/definitions/BundledProductSpecification"
          }
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "id": {
          "type": "string"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "pExtension": {
          "$ref": "#/definitions/ProductSpecificationExtension"
        },
        "productNumber": {
          "type": "string",
          "description": "An identification number assigned to uniquely identity the specification"
        },
        "productSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristic"
          }
        },
        "productSpecificationRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationRelationship"
          }
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "description": "The ResourceSpecification is required to realize a ProductSpecification.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRef"
          }
        },
        "serviceSpecification": {
          "type": "array",
          "description": "ServiceSpecification(s) required to realize a ProductSpecification.",
          "items": {
            "$ref": "#/definitions/ServiceSpecificationRef"
          }
        },
        "targetProductSchema": {
          "description": "A target product schema reference. The reference object to the schema and type of target product which is described by product specification.",
          "$ref": "#/definitions/TargetProductSchema"
        },
        "validFor": {
          "description": "The period for which the product specification is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductSpecificationCreate",
      "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role. Skipped properties: id,href"
    },
    "ProductSpecificationExtension": {
      "type": "object",
      "properties": {
        "createInventoryItem": {
          "type": "boolean",
          "description": "createInventoryItem."
        },
        "fulfillmentSpecification": {
          "description": "FulfillmentSpecification.",
          "$ref": "#/definitions/FulfillmentSpecification"
        },
        "fulfillmentSpecificationOperation": {
          "type": "array",
          "description": "fulfillmentSpecificationOperation.",
          "items": {
            "$ref": "#/definitions/FulfillmentSpecificationOperation"
          }
        }
      },
      "title": "ProductSpecificationExtension"
    },
    "ProductSpecificationRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductSpecificationRef"
    },
    "ProductSpecificationRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
        },
        "validFor": {
          "description": "The period for which the\r\nproductSpecificationRelationship is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ProductSpecificationRelationship"
    },
    "ProductSpecificationUpdate": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "attachment": {
          "type": "array",
          "description": "Complements the description of an element (for instance a product) through video, pictures...",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification"
        },
        "bundledProductSpecification": {
          "type": "array",
          "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification.",
          "items": {
            "$ref": "#/definitions/BundledProductSpecification"
          }
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "pExtension": {
          "$ref": "#/definitions/ProductSpecificationExtension"
        },
        "productNumber": {
          "type": "string",
          "description": "An identification number assigned to uniquely identity the specification"
        },
        "productSpecCharacteristic": {
          "type": "array",
          "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationCharacteristic"
          }
        },
        "productSpecificationRelationship": {
          "type": "array",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications.",
          "items": {
            "$ref": "#/definitions/ProductSpecificationRelationship"
          }
        },
        "relatedParty": {
          "type": "array",
          "description": "A related party defines party or party role linked to a specific entity.",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "description": "The ResourceSpecification is required to realize a ProductSpecification.",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRef"
          }
        },
        "serviceSpecification": {
          "type": "array",
          "description": "ServiceSpecification(s) required to realize a ProductSpecification.",
          "items": {
            "$ref": "#/definitions/ServiceSpecificationRef"
          }
        },
        "targetProductSchema": {
          "description": "A target product schema reference. The reference object to the schema and type of target product which is described by product specification.",
          "$ref": "#/definitions/TargetProductSchema"
        },
        "validFor": {
          "description": "The period for which the product specification is valid",
          "$ref": "#/definitions/TimePeriod"
        },
        "version": {
          "type": "string",
          "description": "Product specification version"
        }
      },
      "title": "ProductSpecificationUpdate",
      "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role. Skipped properties: id,href,lastUpdate"
    },
    "Quantity": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float",
          "description": "A quantity of something, typically the total of a thing or\r\nthings in number, size, value, extent, or money."
        },
        "units": {
          "type": "string",
          "description": "The unit of measure for the quantity, such as meters, cubic\r\nyards, kilograms [ISO 80000], and the currency referring to"
        }
      },
      "title": "Quantity"
    },
    "RelatedParty": {
      "type": "object",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "RelatedParty"
    },
    "RelatedSpecification": {
      "type": "object",
      "required": [
        "relation",
        "specification"
      ],
      "properties": {
        "relation": {
          "type": "string",
          "description": "Relation definition between Product Specification."
        },
        "specification": {
          "description": "Related Product Specification.",
          "$ref": "#/definitions/ProductSpecificationRef"
        }
      },
      "title": "RelatedSpecification"
    },
    "ResourceCandidateRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceCandidateRef"
    },
    "ResourceSpecificationRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ResourceSpecificationRef"
    },
    "SLARef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "SLARef"
    },
    "ServiceCandidateRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceCandidateRef"
    },
    "ServiceSpecificationRef": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Indicates the base type of this entity"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the entity"
        },
        "id": {
          "type": "string",
          "description": "This field is custom non unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "version": {
          "type": "string"
        }
      },
      "title": "ServiceSpecificationRef"
    },
    "TargetProductSchema": {
      "type": "object",
      "properties": {
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        }
      },
      "title": "TargetProductSchema"
    },
    "TaxItem": {
      "type": "object",
      "required": [
        "taxAmount",
        "taxCategory",
        "taxRate"
      ],
      "properties": {
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing extended entity REST resource"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of entity"
        },
        "taxAmount": {
          "description": "Tax amount",
          "$ref": "#/definitions/Money"
        },
        "taxCategory": {
          "type": "string",
          "description": "A categorization of the tax rate"
        },
        "taxRate": {
          "type": "number",
          "description": "Tax rate"
        }
      },
      "title": "TaxItem"
    },
    "TimePeriod": {
      "type": "object",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Period end date time."
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Period start date time."
        }
      },
      "title": "TimePeriod"
    }
  }
}