{
  "swagger": "2.0",
  "info": {
    "description": "## TMF API Reference : TMF 641 - Service Ordering Management   Version 4.0   The Service Order API provides a standardized mechanism for managing Service Order, a type of order which can be used to place an order between internal Customer Order management system to service order management system or between a service provider and a partner and vice versa.  ### Service Order resource A service order will describe a list of service order items.  A service order item references an action on an existing  or  future  service.  By  service  we  designed  Customer Facing  Service  (CFS)  as  well  as  Resource Facing Service (RFS). From a component perspective, a service order should be available - from a Service Orchestration Component (and it could mix CFS and RFS) - from an Infrastructure Control & Management component (and it would have only RFS)  ### TMF641 performs the following operations on service order resource : - Retrieval of a service order or a collection of service orders depending on filter criteria - Partial update of a service order (including updating rules) - Creation of a service order (including default values and creation rules) - Deletion of service order (for administration purposes) - Notification of events on Service order  **Cancel Service Order resource**  This resource is used to request a service order cancellation.  **TMF641 provides following operations on Cancel Service Order resource :**  - Retrieval of a cancel service order or a collection of cancel service orders  - Creation of a cancel service order  - Notification of events on cancel service order.  Copyright Â© TM Forum 2020. All Rights Reserved",
    "version": "Version v4 (prepared with Service Ordering API REST Specification TMF641 Release 20.5.0 v4.0.0)",
    "title": "Orbitant ServiceOrdering API",
    "contact": {
      "name": "PiA(people in action)",
      "url": "http://www.pia-team.com/",
      "email": "info@pia-team.com"
    },
    "license": {
      "name": "PiA License",
      "url": "http://www.pia-team.com"
    }
  },
  "host": "demo.test.orbitant.dev",
  "basePath": "/api/serviceOrderingManagement/v4",
  "tags": [
    {
      "name": "cancelServiceOrder",
      "description": "the cancelServiceOrder API"
    },
    {
      "name": "cancelserviceOrder"
    },
    {
      "name": "event subscription",
      "description": "the hub API"
    },
    {
      "name": "events subscription"
    },
    {
      "name": "serviceOrder"
    }
  ],
  "paths": {
    "/cancelServiceOrder": {
      "get": {
        "tags": [
          "cancelServiceOrder"
        ],
        "summary": "List or find CancelServiceOrder objects",
        "description": "This operation list or find CancelServiceOrder entities",
        "operationId": "listCancelServiceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CancelServiceOrder"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "cancelServiceOrder"
        ],
        "summary": "Creates a CancelServiceOrder",
        "description": "This operation creates a CancelServiceOrder entity.",
        "operationId": "createCancelServiceOrder",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The CancelServiceOrder to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelServiceOrder_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CancelServiceOrder"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CancelServiceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/cancelServiceOrder/{id}": {
      "get": {
        "tags": [
          "cancelServiceOrder"
        ],
        "summary": "Retrieves a CancelServiceOrder by ID",
        "description": "This operation retrieves a CancelServiceOrder entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveCancelServiceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the CancelServiceOrder",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CancelServiceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "cancelServiceOrder"
        ],
        "summary": "Updates partially a CancelServiceOrder",
        "description": "This operation updates partially a CancelServiceOrder entity.",
        "operationId": "jsonPatchCancelServiceOrder",
        "consumes": [
          "application/json-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the CancelServiceOrder",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "jsonPatch",
            "description": "The patch data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/CancelServiceOrder"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub": {
      "post": {
        "tags": [
          "events subscription",
          "event subscription"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "events subscription",
          "event subscription"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the registered listener",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "Deleted",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceOrder": {
      "get": {
        "tags": [
          "serviceOrder"
        ],
        "summary": "List or find ServiceOrder objects",
        "description": "This operation list or find ServiceOrder entities",
        "operationId": "listServiceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort param of Requested number of resources to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceOrder"
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceOrder"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "serviceOrder"
        ],
        "summary": "Creates a ServiceOrder",
        "description": "This operation creates a ServiceOrder entity.",
        "operationId": "createServiceOrder",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServiceOrder to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOrder_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/serviceOrder/{id}": {
      "get": {
        "tags": [
          "serviceOrder"
        ],
        "summary": "Retrieves a ServiceOrder by ID",
        "description": "This operation retrieves a ServiceOrder entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveServiceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceOrder",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "serviceOrder"
        ],
        "summary": "Deletes a ServiceOrder",
        "description": "This operation deletes a ServiceOrder entity.",
        "operationId": "deleteServiceOrder",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceOrder",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "serviceOrder"
        ],
        "summary": "Updates partially a ServiceOrder",
        "description": "This operation updates partially a ServiceOrder entity.",
        "operationId": "patchServiceOrder_1",
        "consumes": [
          "application/merge-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServiceOrder to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOrder_Update"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ServiceOrder",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AppointmentRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "description": {
          "type": "string",
          "description": "An explanatory text regarding the appointment made with a party"
        },
        "href": {
          "type": "string",
          "description": "The reference of the appointment"
        },
        "id": {
          "type": "string",
          "description": "The identifier of the referred appointment"
        }
      },
      "title": "AppointmentRef",
      "description": "Refers an appointment, such as a Customer presentation or internal meeting or site visit"
    },
    "CancelServiceOrder": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason why the order is cancelled."
        },
        "createdBy": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "effectiveCancellationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order is cancelled."
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the cancellation request"
        },
        "id": {
          "type": "string",
          "description": "id of the cancellation request (this is not an order id)"
        },
        "requestedCancellationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the submitter wants the order to be cancelled"
        },
        "revision": {
          "type": "integer",
          "format": "int64"
        },
        "serviceOrder": {
          "$ref": "#/definitions/ServiceOrderRef"
        },
        "state": {
          "type": "string",
          "description": "Tracks the lifecycle status of the cancellation request, such as Acknowledged, Rejected, InProgress, Pending and so on.",
          "enum": [
            "acknowledged",
            "terminatedWithError",
            "inProgress",
            "done",
            "rejected"
          ]
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "CancelServiceOrder",
      "description": "Request for cancellation an existing Service order"
    },
    "CancelServiceOrderUpdate": {
      "type": "object",
      "properties": {
        "cancellationReason": {
          "type": "string",
          "description": "Reason why the order is cancelled."
        },
        "state": {
          "type": "string"
        }
      },
      "title": "CancelServiceOrderUpdate",
      "description": "Patch request for cancellation an existing cancel service order. Skipped properties: id,href,revision,effectiveCancellationDate,requestedCancellationDate,serviceOrder."
    },
    "CancelServiceOrder_Create": {
      "type": "object",
      "required": [
        "serviceOrder"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason why the order is cancelled."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a cancel service Order entity."
        },
        "requestedCancellationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the submitter wants the order to be cancelled"
        },
        "serviceOrder": {
          "$ref": "#/definitions/ServiceOrderRef"
        }
      },
      "title": "CancelServiceOrder_Create",
      "description": "Request for cancellation an existing Service order Skipped properties: id,href,state,effectiveCancellationDate"
    },
    "Characteristic": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "characteristicRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CharacteristicRelationship"
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the characteristic"
        },
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "value": {
          "type": "string",
          "description": "The value of the characteristic"
        },
        "valueType": {
          "type": "string",
          "description": "Data type of the value of the characteristic"
        }
      },
      "title": "Characteristic",
      "description": "Describes a given characteristic of an object or entity through a name/value pair."
    },
    "CharacteristicRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the characteristic"
        },
        "relationshipType": {
          "type": "string",
          "description": "The type of relationship"
        }
      },
      "title": "CharacteristicRelationship",
      "description": "Another Characteristic that is related to the current Characteristic;"
    },
    "ConstraintRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The (class) type of the referred constraint"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target constraint"
        },
        "id": {
          "type": "string",
          "description": "reference id to the target constraint"
        },
        "name": {
          "type": "string",
          "description": "Name given to the constraint"
        },
        "version": {
          "type": "string",
          "description": "constraint version"
        }
      },
      "title": "ConstraintRef",
      "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec."
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name."
        },
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "code": {
          "type": "string",
          "description": "Application relevant detail, defined in the API or a common list."
        },
        "localizedMessage": {
          "type": "string"
        },
        "message": {
          "type": "string",
          "description": "More details and corrective actions related to the error which can be shown to a client user."
        },
        "reason": {
          "type": "string",
          "description": "Explanation of the reason for the error which can be shown to a client user."
        },
        "referenceError": {
          "type": "string",
          "description": "URI of documentation describing the error."
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "status": {
          "type": "string",
          "description": "HTTP Error code extension"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      },
      "title": "Error",
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
    },
    "EventSubscription": {
      "type": "object",
      "required": [
        "callback",
        "id"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        }
      },
      "title": "EventSubscription",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "EventSubscriptionInput": {
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      },
      "title": "EventSubscriptionInput",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "ExternalReference": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "externalReferenceType": {
          "type": "string",
          "description": "Type of the external reference"
        },
        "id": {
          "type": "string",
          "description": "Id of the external reference"
        },
        "name": {
          "type": "string",
          "description": "External reference name"
        }
      },
      "title": "ExternalReference",
      "description": "External reference of the individual or reference in other system"
    },
    "Feature": {
      "type": "object",
      "required": [
        "featureCharacteristic",
        "name"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "constraint": {
          "type": "array",
          "description": "This is a list of feature constraints.",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "featureBundle": {
          "type": "array",
          "description": "Bundled feature specification",
          "items": {
            "$ref": "#/definitions/FeatureBundle"
          }
        },
        "featureCharacteristic": {
          "type": "array",
          "description": "This is a list of Characteristics for a particular feature.",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "featureRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureRelationship"
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the feature."
        },
        "isBundle": {
          "type": "boolean",
          "description": "True if this is a feature group. Default is false."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "True if this feature is enabled. Default is true."
        },
        "name": {
          "type": "string",
          "description": "This is the name for the feature."
        }
      },
      "title": "Feature",
      "description": "Configuration feature."
    },
    "FeatureBundle": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the FeatureBundle"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the FeatureBundle"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the FeatureBundle"
        }
      },
      "title": "FeatureBundle",
      "description": "A type of FeatureSpecification that belongs to a grouping of FeatureSpecifications made available to the market. It inherits of all attributes of FeatureSpecification."
    },
    "FeatureRelationship": {
      "type": "object",
      "required": [
        "name",
        "relationshipType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the target feature."
        },
        "name": {
          "type": "string",
          "description": "This is the name of the target feature."
        },
        "relationshipType": {
          "type": "string",
          "description": "This is the type of the feature relationship."
        },
        "validFor": {
          "description": "The period for which this feature relationship is valid.",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "FeatureRelationship",
      "description": "Configuration feature"
    },
    "JsonPatch": {
      "type": "object",
      "title": "JsonPatch"
    },
    "Note": {
      "type": "object",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "author": {
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the note within its containing entity (may or may not be globally unique, depending on provider implementation)"
        },
        "text": {
          "type": "string",
          "description": "Text of the note"
        }
      },
      "title": "Note",
      "description": "Extra information about a given entity"
    },
    "RelatedEntityRefOrValue": {
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string"
        }
      },
      "title": "RelatedEntityRefOrValue",
      "description": "A reference to an entity, where the type of the entity is not known in advance. A related entity defines a entity described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Entity and not the RelatedEntityRefOrValue class itself"
    },
    "RelatedParty": {
      "type": "object",
      "required": [
        "@referredType",
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        }
      },
      "title": "RelatedParty",
      "description": "Related Entity reference. A related party defines party or party role linked to a specific entity."
    },
    "RelatedPlaceRefOrValue": {
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
        },
        "role": {
          "type": "string"
        }
      },
      "title": "RelatedPlaceRefOrValue",
      "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself"
    },
    "RelatedServiceOrderItem": {
      "type": "object",
      "required": [
        "itemId",
        "serviceOrderId"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "itemAction": {
          "type": "string",
          "description": "Action of the order item for this service",
          "enum": [
            "add",
            "modify",
            "delete",
            "noChange",
            "statusChange.Suspend",
            "statusChange.Resume",
            "modify.Migration",
            "modify.Takeover",
            "modify.Relocation"
          ]
        },
        "itemId": {
          "type": "string",
          "description": "Identifier of the order item where the service was managed"
        },
        "role": {
          "type": "string",
          "description": "role of the service order item for this service"
        },
        "serviceOrderHref": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "serviceOrderId": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        }
      },
      "title": "RelatedServiceOrderItem",
      "description": "RelatedServiceOrderItem (a ServiceOrder item) .The service order item which triggered service creation/change/termination."
    },
    "ResourceRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        }
      },
      "title": "ResourceRef"
    },
    "ServiceBundle": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the FeatureBundle"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the FeatureBundle"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the FeatureBundle"
        }
      },
      "title": "ServiceBundle",
      "description": "A type of ServiceSpecification that belongs to a grouping of ServiceSpecifications made available to the market. It inherits of all attributes of ServiceSpecification."
    },
    "ServiceOrder": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "cancellationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order is cancelled. This is used when order is cancelled. "
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason why the order is cancelled. This is used when order is cancelled. "
        },
        "category": {
          "type": "string",
          "description": "Used to categorize the order, useful for the OM system, such as: Broadband, TVOption"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective delivery date amended by the provider"
        },
        "createdBy": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A free-text description of the service order"
        },
        "expectedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Expected delivery date amended by the provider"
        },
        "externalId": {
          "type": "string",
          "description": "ID given by the consumer to facilitate searches"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the order"
        },
        "id": {
          "type": "string",
          "description": "ID created on repository side"
        },
        "note": {
          "type": "array",
          "description": "Extra-information about the order; e.g. useful to add extra delivery information that could be useful for a human process",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "notificationContact": {
          "type": "string",
          "description": "Contact attached to the order to send back information regarding this order"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time"
        },
        "orderRelationship": {
          "type": "array",
          "description": "A list of service orders related to this order (e.g. prerequisite, dependent on)",
          "items": {
            "$ref": "#/definitions/ServiceOrderRelationship"
          }
        },
        "priority": {
          "type": "string",
          "description": "Can be used by consumers to prioritize orders in a Service Order Management system"
        },
        "relatedParty": {
          "type": "array",
          "description": "A list of parties which are involved in this order and the role they are playing",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "requestedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested delivery date from the requestors perspective"
        },
        "requestedStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Order start date wished by the requestor"
        },
        "revision": {
          "type": "integer",
          "format": "int64"
        },
        "serviceOrderItem": {
          "type": "array",
          "description": "A list of service order items to be processed by this order",
          "items": {
            "$ref": "#/definitions/ServiceOrderItem"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was started for processing"
        },
        "state": {
          "type": "string",
          "description": "State of the order: described in the state-machine diagram",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        },
        "stateReason": {
          "type": "string",
          "description": "The life cycle state reason of the resource."
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "ServiceOrder"
    },
    "ServiceOrderItem": {
      "type": "object",
      "required": [
        "action",
        "id",
        "service"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "action": {
          "type": "string",
          "description": "The action to be carried out on the Service. Can be: add, modify, delete, noChange",
          "enum": [
            "add",
            "modify",
            "delete",
            "noChange",
            "statusChange.Suspend",
            "statusChange.Resume",
            "modify.Migration",
            "modify.Takeover",
            "modify.Relocation"
          ]
        },
        "appointment": {
          "description": "An appointment that was set up with a related party for this order item",
          "$ref": "#/definitions/AppointmentRef"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the individual line item"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "Quantity ordered"
        },
        "relatedEntity": {
          "type": "array",
          "description": "A list of related  entity in relationship with this service order item",
          "items": {
            "$ref": "#/definitions/RelatedEntityRefOrValue"
          }
        },
        "relatedProductFlowInstanceId": {
          "type": "string",
          "description": "This value is passed by POF and represents the Camunda Flow Instance Id"
        },
        "service": {
          "description": "The Service to be acted on by the order item",
          "$ref": "#/definitions/ServiceRefOrValue"
        },
        "serviceOrderItem": {
          "type": "array",
          "description": "A list of order items embedded to this order item",
          "items": {
            "$ref": "#/definitions/ServiceOrderItem"
          }
        },
        "serviceOrderItemRelationship": {
          "type": "array",
          "description": "A list of order items related to this order item",
          "items": {
            "$ref": "#/definitions/ServiceOrderItemRelationship"
          }
        },
        "state": {
          "type": "string",
          "description": "State of the order item: described in the state machine diagram. This is the requested state.",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "assessingCancellation",
            "pendingCancellation",
            "partial"
          ]
        },
        "stateReason": {
          "type": "string",
          "description": "The life cycle state reason of the resource."
        }
      },
      "title": "ServiceOrderItem"
    },
    "ServiceOrderItemRef": {
      "type": "object",
      "required": [
        "itemId"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "itemId": {
          "type": "string",
          "description": "Identifier of the line item"
        },
        "serviceOrderHref": {
          "type": "string",
          "description": "Link to the order to which this item belongs to"
        },
        "serviceOrderId": {
          "type": "string",
          "description": "Identifier of the order that this item belongs to"
        }
      },
      "title": "ServiceOrderItemRef"
    },
    "ServiceOrderItemRelationship": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "orderItem": {
          "description": "A service order item in relationship with this order item",
          "$ref": "#/definitions/ServiceOrderItemRef"
        },
        "relationshipType": {
          "type": "string",
          "description": "The type of related order item, can be: dependency if the order item needs to be not started until another order item is complete"
        }
      },
      "title": "ServiceOrderItemRelationship",
      "description": "Linked service order item to the one containing this attribute"
    },
    "ServiceOrderRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related service order"
        }
      },
      "title": "ServiceOrderRef",
      "description": "Service Order reference. Useful to understand the which was the Service order through which the service was instantiated in the service inventory"
    },
    "ServiceOrderRelationship": {
      "type": "object",
      "required": [
        "id",
        "relationshipType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The entity type of the related order"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "href": {
          "type": "string",
          "description": "A hyperlink to the related order"
        },
        "id": {
          "type": "string",
          "description": "The id of the related order"
        },
        "relationshipType": {
          "type": "string",
          "description": "The type of related order, such as: [dependency] if the order needs to be [not started] until another order item is complete (a service order in this case) or [cross-ref] to keep track of the source order (a serviceOrder)"
        }
      },
      "title": "ServiceOrderRelationship",
      "description": "Linked service order to the one containing this attribute"
    },
    "ServiceOrder_Create": {
      "type": "object",
      "required": [
        "serviceOrderItem"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "category": {
          "type": "string",
          "description": "Used to categorize the order, useful for the OM system, such as: Broadband, TVOption"
        },
        "description": {
          "type": "string",
          "description": "A free-text description of the service order"
        },
        "externalId": {
          "type": "string",
          "description": "ID given by the consumer to facilitate searches"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of a service Order entity."
        },
        "note": {
          "type": "array",
          "description": "Extra-information about the order; e.g. useful to add extra delivery information that could be useful for a human process",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "notificationContact": {
          "type": "string",
          "description": "Contact attached to the order to send back information regarding this order"
        },
        "orderRelationship": {
          "type": "array",
          "description": "A list of service orders related to this order (e.g. prerequisite, dependent on)",
          "items": {
            "$ref": "#/definitions/ServiceOrderRelationship"
          }
        },
        "priority": {
          "type": "string",
          "description": "Can be used by consumers to prioritize orders in a Service Order Management system"
        },
        "relatedParty": {
          "type": "array",
          "description": "A list of parties which are involved in this order and the role they are playing",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "requestedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested delivery date from the requestors perspective"
        },
        "requestedStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Order start date wished by the requestor"
        },
        "serviceOrderItem": {
          "type": "array",
          "description": "A list of service order items to be processed by this order",
          "items": {
            "$ref": "#/definitions/ServiceOrderItem"
          }
        },
        "stateReason": {
          "type": "string",
          "description": "The life cycle state reason of the resource."
        }
      },
      "title": "ServiceOrder_Create",
      "description": " Skipped properties: id,href,orderDate,completionDate,expectedCompletionDate,startDate,state"
    },
    "ServiceOrder_Update": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "cancellationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order is cancelled. This is used when order is cancelled. "
        },
        "cancellationReason": {
          "type": "string",
          "description": "Reason why the order is cancelled. This is used when order is cancelled. "
        },
        "category": {
          "type": "string",
          "description": "Used to categorize the order, useful for the OM system, such as: Broadband, TVOption"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective delivery date amended by the provider"
        },
        "description": {
          "type": "string",
          "description": "A free-text description of the service order"
        },
        "expectedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Expected delivery date amended by the provider"
        },
        "externalId": {
          "type": "string",
          "description": "ID given by the consumer to facilitate searches"
        },
        "externalReference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalReference"
          }
        },
        "note": {
          "type": "array",
          "description": "Extra-information about the order; e.g. useful to add extra delivery information that could be useful for a human process",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "notificationContact": {
          "type": "string",
          "description": "Contact attached to the order to send back information regarding this order"
        },
        "orderRelationship": {
          "type": "array",
          "description": "A list of service orders related to this order (e.g. prerequisite, dependent on)",
          "items": {
            "$ref": "#/definitions/ServiceOrderRelationship"
          }
        },
        "priority": {
          "type": "string",
          "description": "Can be used by consumers to prioritize orders in a Service Order Management system"
        },
        "relatedParty": {
          "type": "array",
          "description": "A list of parties which are involved in this order and the role they are playing",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "requestedCompletionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Requested delivery date from the requestors perspective"
        },
        "requestedStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Order start date wished by the requestor"
        },
        "serviceOrderItem": {
          "type": "array",
          "description": "A list of service order items to be processed by this order",
          "items": {
            "$ref": "#/definitions/ServiceOrderItem"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the order was started for processing"
        },
        "state": {
          "type": "string",
          "description": "State of the order: described in the state-machine diagram",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        },
        "stateReason": {
          "type": "string",
          "description": "The life cycle state reason of the resource."
        }
      },
      "title": "ServiceOrder_Update",
      "description": " Skipped properties: id,href,orderDate"
    },
    "ServiceRefOrValue": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "category": {
          "type": "string",
          "description": "Is it a customer facing or resource facing service"
        },
        "description": {
          "type": "string",
          "description": "Free-text description of the service"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the service ends"
        },
        "feature": {
          "type": "array",
          "description": "A list of feature associated with this service ",
          "items": {
            "$ref": "#/definitions/Feature"
          }
        },
        "hasStarted": {
          "type": "boolean",
          "description": "If TRUE, this Service has already been started"
        },
        "href": {
          "type": "string",
          "description": "Reference of the service"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the service"
        },
        "isBundle": {
          "type": "boolean",
          "description": "If true, the service is a ServiceBundle which regroup a service hierachy. If false, the service is a 'atomic' service (hierachy leaf)."
        },
        "isServiceEnabled": {
          "type": "boolean",
          "description": "If FALSE and hasStarted is FALSE, this particular Service has NOT been enabled for use - if FALSE and hasStarted is TRUE then the service has failed "
        },
        "isStateful": {
          "type": "boolean",
          "description": "If TRUE, this Service can be changed without affecting any other services"
        },
        "name": {
          "type": "string",
          "description": "Name of the service"
        },
        "note": {
          "type": "array",
          "description": "A list of notes made on this service",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "place": {
          "type": "array",
          "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)",
          "items": {
            "$ref": "#/definitions/RelatedPlaceRefOrValue"
          }
        },
        "relatedEntity": {
          "type": "array",
          "description": "A list of related  entity in relationship with this service ",
          "items": {
            "$ref": "#/definitions/RelatedEntityRefOrValue"
          }
        },
        "relatedParty": {
          "type": "array",
          "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "serviceBundle": {
          "type": "array",
          "description": "A type of ServiceRefOrValueSpecification that belongs to a grouping of ServiceBundle made available to the market. It inherits of all attributes of ServiceBundle.",
          "items": {
            "$ref": "#/definitions/ServiceBundle"
          }
        },
        "serviceCharacteristic": {
          "type": "array",
          "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) ",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "serviceDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the service was created (whatever its status)."
        },
        "serviceOrderItem": {
          "type": "array",
          "description": "A list of service order items related to this service",
          "items": {
            "$ref": "#/definitions/RelatedServiceOrderItem"
          }
        },
        "serviceRelationship": {
          "type": "array",
          "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory.",
          "items": {
            "$ref": "#/definitions/ServiceRelationship"
          }
        },
        "serviceSpecification": {
          "description": "The specification from which this service was instantiated",
          "$ref": "#/definitions/ServiceSpecificationRef"
        },
        "serviceType": {
          "type": "string",
          "description": "Business type of the service"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the service starts"
        },
        "startMode": {
          "type": "string",
          "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
        },
        "state": {
          "type": "string",
          "description": "The life cycle state of the service, such as designed, reserved, active, etc...",
          "enum": [
            "feasibilityChecked",
            "designed",
            "reserved",
            "inactive",
            "active",
            "terminated"
          ]
        },
        "supportingResource": {
          "type": "array",
          "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        },
        "supportingService": {
          "type": "array",
          "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)",
          "items": {
            "$ref": "#/definitions/ServiceRefOrValue"
          }
        }
      },
      "title": "ServiceRefOrValue",
      "description": "A Service to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Service entity and not the RelatedServiceRefOrValue class itself"
    },
    "ServiceRelationship": {
      "type": "object",
      "required": [
        "relationshipType"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "relationshipType": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/ServiceRefOrValue"
        },
        "serviceRelationshipCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        }
      },
      "title": "ServiceRelationship"
    },
    "ServiceSpecificationRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "example": "ResourceSpecification",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "example": "LogicalResourceSpecification",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference"
        },
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Service specification version"
        }
      },
      "title": "ServiceSpecificationRef",
      "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification."
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "className": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "methodName": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      },
      "title": "StackTraceElement"
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "localizedMessage": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      },
      "title": "Throwable"
    },
    "TimePeriod": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "1985-04-12T23:20:50.52Z",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "1985-04-12T23:20:50.52Z",
          "description": "Start of the time period, using IETC-RFC-3339 format"
        }
      },
      "title": "TimePeriod",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
    }
  }
}