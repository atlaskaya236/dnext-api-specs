{
  "swagger": "2.0",
  "info": {
    "description": "This is Swagger UI environment generated for DNext Job Scheduler API specification\n\n Job Scheduler allows you to configure units of work (called Jobs) to be executed according to a given schedule, either once or repeatedly. Some examples are:\n * Sending a notification SMS to the customer N days before subscription expires\n * Emptying a shopping cart after some time\n\n When a job is fired (i.e. executed), the JobScheduler service sends the job to a target where the actual work for the job is done. The target can be one of the following:\n * Make an HTTP call to a given URL",
    "version": "4.0.0",
    "title": "Job Scheduler",
    "contact": {
      "name": "PiA(people in action)",
      "url": "http://www.pia-team.com/",
      "email": "info@pia-team.com"
    }
  },
  "basePath": "/api/jobScheduler/v1",
  "tags": [
    {
      "name": "events subscription",
      "description": "Hub Api Controller"
    },
    {
      "name": "job",
      "description": "Job Api Controller"
    },
    {
      "name": "jobExecution",
      "description": "Job Execution Api Controller"
    }
  ],
  "paths": {
    "/hub": {
      "post": {
        "tags": [
          "events subscription"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "events subscription"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the registered listener",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/listener/jobCreateEvent": {
      "post": {
        "operationId": "listenToJobCreateEvent",
        "summary": "Client listener for entity JobCreateEvent",
        "description": "Example of a client listener for receiving the notification JobCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/JobCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/jobAttributeValueChangeEvent": {
      "post": {
        "operationId": "listenToJobAttributeValueChangeEvent",
        "summary": "Client listener for entity JobAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification JobAttributeValueChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/JobAttributeValueChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/jobStateChangeEvent": {
      "post": {
        "operationId": "listenToJobStateChangeEvent",
        "summary": "Client listener for entity JobStateChangeEvent",
        "description": "Example of a client listener for receiving the notification JobStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/JobStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/jobDeleteEvent": {
      "post": {
        "operationId": "listenToJobDeleteEvent",
        "summary": "Client listener for entity JobDeleteEvent",
        "description": "Example of a client listener for receiving the notification JobDeleteEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/JobDeleteEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/job": {
      "get": {
        "tags": [
          "job"
        ],
        "summary": "List Job objects",
        "description": "This operation list Job entities",
        "operationId": "listJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Comma-separated properties to sort fields in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "job"
        ],
        "summary": "Creates a Job",
        "description": "This operation creates a Job entity.",
        "operationId": "createJob",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The Job to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job_Create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/job/trigger/{id}": {
      "post": {
        "tags": [
          "job"
        ],
        "summary": "Triggers a Job by ID",
        "description": "This operation instantly triggers a Job entity once.",
        "operationId": "triggerJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Job",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/job/{id}": {
      "get": {
        "tags": [
          "job"
        ],
        "summary": "Retrieves a Job by ID",
        "description": "This operation retrieves a Job entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Job",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "job"
        ],
        "summary": "Deletes a Job",
        "description": "This operation deletes a Job entity.",
        "operationId": "deleteJob",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Job",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "job"
        ],
        "summary": "Partially updates a Job",
        "description": "This operation partially updates a Job entity.",
        "operationId": "patchJob",
        "consumes": [
          "application/merge-patch+json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Job",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "jobUpdate",
            "description": "The Job to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job_Update"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/jobExecution": {
      "get": {
        "tags": [
          "jobExecution"
        ],
        "summary": "List job executions",
        "description": "This operation list Job execution entities",
        "operationId": "listJobExecution",
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "type": "integer",
            "format": "int32",
            "allowEmptyValue": false
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Comma-separated properties to sort fields in response",
            "required": false,
            "type": "string",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobExecution"
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobExecution"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "referenceError": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "Error",
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
    },
    "EventSubscription": {
      "type": "object",
      "required": [
        "callback",
        "id"
      ],
      "properties": {
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        }
      },
      "title": "EventSubscription",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "EventSubscriptionInput": {
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      },
      "title": "EventSubscriptionInput",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
    },
    "JobCreateEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the resource involved in the event"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource involved in the event"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explanatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/JobCreateEventPayload"
        }
      }
    },
    "JobCreateEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "job": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Job"
        }
      }
    },
    "JobAttributeValueChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explanatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "fieldPath": {
          "type": "string",
          "description": "The path identifying the object field concerned by this notification."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/JobAttributeValueChangeEventPayload"
        }
      }
    },
    "JobAttributeValueChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "job": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Job"
        }
      }
    },
    "JobStateChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the resource involved in the event"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource involved in the event"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explanatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/JobStateChangeEventPayload"
        }
      }
    },
    "JobStateChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "job": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Job"
        }
      }
    },
    "JobDeleteEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the resource involved in the event"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource involved in the event"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explanatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOccurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/JobDeleteEventPayload"
        }
      }
    },
    "JobDeleteEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "job": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Job"
        }
      }
    },
    "HttpHeader": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "X-My-Custom-Header",
          "description": "Name of the HTTP header."
        },
        "value": {
          "type": "string",
          "description": "Value of the HTTP header"
        }
      },
      "title": "HttpHeader",
      "description": "HTTP header name and value."
    },
    "HttpTarget": {
      "type": "object",
      "required": [
        "httpMethod",
        "url"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "body": {
          "type": "string",
          "example": {
            "msisdn": "+90542xxxyyzz",
            "smsText": "Subscription will expire in 3 days"
          },
          "description": "Body of the request."
        },
        "header": {
          "type": "array",
          "description": "List of request headers.",
          "items": {
            "$ref": "#/definitions/HttpHeader"
          }
        },
        "httpMethod": {
          "type": "string",
          "example": "POST",
          "description": "HTTP method of the request.",
          "enum": [
            "GET",
            "POST",
            "PATCH",
            "DELETE"
          ]
        },
        "param": {
          "type": "array",
          "description": "List of request params.",
          "items": {
            "$ref": "#/definitions/RequestParam"
          }
        },
        "url": {
          "type": "string",
          "example": "http://host:port/api/communicationManagement/v4/smsNotification",
          "description": "Url of the request."
        }
      },
      "title": "HttpTarget",
      "description": "Represents http targets."
    },
    "Job": {
      "type": "object",
      "required": [
        "name",
        "retryPolicy",
        "schedule",
        "state",
        "target"
      ],
      "properties": {
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of creation"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of update"
        },
        "createdBy": {
          "type": "string",
          "description": "Name of created by user"
        },
        "updatedBy": {
          "type": "string",
          "description": "Name of updated by user"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "description": {
          "type": "string",
          "example": "Test purpose",
          "description": "Description of the job."
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the job"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the job"
        },
        "name": {
          "type": "string",
          "example": "Notify subscription expiry",
          "description": "The name of the job, which usually has a business meaning."
        },
        "retryPolicy": {
          "type": "string",
          "example": "fireNow",
          "description": "Retry policy on job failure (e.g. when the target URL is not reachable). If not provided, JobScheduler will not retry in case of a failure.",
          "enum": [
            "default",
            "ignore",
            "smart",
            "fireNow",
            "rescheduleNowExisting",
            "rescheduleNowRemaining",
            "rescheduleNextExisting",
            "rescheduleNextRemaining"
          ]
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Version number of the entity"
        },
        "schedule": {
          "description": "Schedule of the job.",
          "$ref": "#/definitions/Schedule"
        },
        "state": {
          "type": "string",
          "example": "active",
          "description": "State of the job.",
          "enum": [
            "active",
            "inactive"
          ]
        },
        "target": {
          "$ref": "#/definitions/JobTarget"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "Job",
      "description": "Represents a job configured to run according to a given schedule. When the job is fired (i.e. executed), the JobScheduler service can either  * make an HTTP call to a given URL  * push a message to a Kafka topic"
    },
    "Job_Create": {
      "type": "object",
      "required": [
        "name",
        "schedule",
        "target"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "description": {
          "type": "string",
          "example": "Test purpose",
          "description": "Description of the job."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the job. Usually generated automatically by the server, but can be specified by the client if needed."
        },
        "name": {
          "type": "string",
          "example": "Notify subscription expiry",
          "description": "The name of the job, which usually has a business meaning."
        },
        "retryPolicy": {
          "type": "string",
          "example": "fireNow",
          "description": "Retry policy on job failure (e.g. when the target URL is not reachable). If not provided, JobScheduler will not retry in case of a failure.",
          "enum": [
            "default",
            "ignore",
            "smart",
            "fireNow",
            "rescheduleNowExisting",
            "rescheduleNowRemaining",
            "rescheduleNextExisting",
            "rescheduleNextRemaining"
          ]
        },
        "schedule": {
          "description": "Schedule of the job.",
          "$ref": "#/definitions/Schedule"
        },
        "state": {
          "type": "string",
          "example": "active",
          "description": "State of the job.",
          "enum": [
            "active",
            "inactive"
          ]
        },
        "target": {
          "$ref": "#/definitions/JobTarget"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "Job_Create",
      "description": "Represents a job configured to run according to a given schedule. When the job is fired (i.e. executed), the JobScheduler service can either  * make an HTTP call to a given URL  * push a message to a Kafka topic"
    },
    "JobExecution": {
      "type": "object",
      "required": [
        "executionTime",
        "job",
        "triggerType"
      ],
      "properties": {
        "executionResult": {
          "type": "string",
          "example": "Successful | 504 Gateway Timeout",
          "description": "The result of the job execution."
        },
        "executionTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-09-28T10:50:16.031Z",
          "description": "Execution time."
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the JobExecution"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the JobExecution entity, generated by the server."
        },
        "job": {
          "description": "The job which this execution belongs to.",
          "$ref": "#/definitions/JobRef"
        },
        "triggerType": {
          "type": "string",
          "example": "scheduled",
          "description": "Whether triggerred manually or scheduled.",
          "enum": [
            "manual",
            "scheduled"
          ]
        }
      },
      "title": "JobExecution",
      "description": "Represents a single execution of a job. JobExecution objects are created by the Job Scheduler service. Therefore, GET is the only operation allowed on them. In order to get executions of a given job, the client should send the following request:      GET /api/jobScheduler/v1/jobExecution?job.id={jobId}"
    },
    "JobRef": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the referred entity"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the referred entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the referred entity."
        }
      },
      "title": "JobRef",
      "description": "Job reference"
    },
    "JobTarget": {
      "type": "object",
      "properties": {
        "httpTarget": {
          "type": "array",
          "description": "HTTP target parameters",
          "items": {
            "$ref": "#/definitions/HttpTarget"
          }
        },
        "kafkaTarget": {
          "type": "array",
          "description": "Kafka target parameters",
          "items": {
            "$ref": "#/definitions/KafkaTarget"
          }
        }
      },
      "title": "JobTarget",
      "description": "The target of the job which will be called when the job fires"
    },
    "Job_Update": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "description": {
          "type": "string",
          "example": "Test purpose",
          "description": "Description of the job."
        },
        "retryPolicy": {
          "type": "string",
          "example": "fireNow",
          "description": "Retry policy on job failure (e.g. when the target URL is not reachable). If not provided, JobScheduler will not retry in case of a failure.",
          "enum": [
            "default",
            "ignore",
            "smart",
            "fireNow",
            "rescheduleNowExisting",
            "rescheduleNowRemaining",
            "rescheduleNextExisting",
            "rescheduleNextRemaining"
          ]
        },
        "schedule": {
          "description": "Schedule of the job.",
          "$ref": "#/definitions/Schedule"
        },
        "state": {
          "type": "string",
          "example": "active",
          "description": "State of the job.",
          "enum": [
            "active",
            "inactive"
          ]
        },
        "target": {
          "$ref": "#/definitions/JobTarget"
        },
        "validFor": {
          "description": "The period for which this REST resource is valid",
          "$ref": "#/definitions/TimePeriod"
        }
      },
      "title": "Job_Update"
    },
    "KafkaTarget": {
      "type": "object",
      "required": [
        "messageContent",
        "topicName"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "messageContent": {
          "type": "string",
          "example": {
            "msisdn": "+90542xxxyyzz",
            "smsText": "Subscription will expire in 3 days"
          },
          "description": "Content of the published message."
        },
        "topicName": {
          "type": "string",
          "example": "smsNotificationTopic",
          "description": "Name of the topic on which the message will be published."
        },
        "keyName": {
          "type": "string",
          "example": "com.pia.orbitant.partymanagement.event.individual.IndividualCreateEvent",
          "description": "Name of the key on which the message will be published."
        }
      },
      "title": "KafkaTarget",
      "description": "Represents kafka targets."
    },
    "RequestParam": {
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "equal": {
          "type": "string",
          "example": "2020-09-26T05:00:00.246Z",
          "description": "Equal to value."
        },
        "greater": {
          "type": "string",
          "example": "2020-09-26T05:00:00.246Z",
          "description": "Greater than value."
        },
        "greaterOrEqual": {
          "type": "string",
          "example": "2020-09-26T05:00:00.246Z",
          "description": "Greater than or equal to value."
        },
        "key": {
          "type": "string",
          "example": "skill.validFor.endDateTime",
          "description": "Key of the request param."
        },
        "lower": {
          "type": "string",
          "example": "2020-09-26T05:00:00.246Z",
          "description": "Lower than value."
        },
        "lowerOrEqual": {
          "type": "string",
          "example": "2020-09-26T05:00:00.246Z",
          "description": "Lower than or equal to value."
        },
        "passed": {
          "description": "A time period passed from the defined time.",
          "$ref": "#/definitions/TimeParam"
        },
        "regex": {
          "type": "string",
          "example": "2020-09-26T05:00:00.246Z",
          "description": "Value for regex expression."
        },
        "remaining": {
          "description": "A time period to the defined time.",
          "$ref": "#/definitions/TimeParam"
        }
      },
      "title": "RequestParam",
      "description": "Represents request params."
    },
    "Schedule": {
      "type": "object",
      "required": [
        "scheduleType",
        "startTime"
      ],
      "properties": {
        "cronExpression": {
          "type": "string",
          "example": "0 * * * *",
          "description": "Cron expression to set schedule of the job."
        },
        "executionRate": {
          "description": "Execution rate of the job.",
          "$ref": "#/definitions/TimeParam"
        },
        "nextExecutionTime": {
          "type": "string",
          "format": "date-time",
          "example": "2019-06-15T00:00:00.246Z",
          "description": "Approximately estimated next execution time."
        },
        "remainingExecution": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Remaining execution count of the job."
        },
        "repeatCount": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Repeat count of the job. default value(-1) is indefinitely."
        },
        "scheduleType": {
          "type": "string",
          "example": "cron",
          "description": "Check whether the job rate will be calculated via cron expression.",
          "enum": [
            "rated",
            "cron"
          ]
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "example": "1985-04-12T23:20:50.523Z",
          "description": "Start time of the job, using IETC-RFC-3339 format."
        }
      },
      "title": "Schedule",
      "description": "Defines the schedule of the job."
    },
    "TimeParam": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day."
        },
        "hour": {
          "type": "integer",
          "format": "int32",
          "description": "Hour."
        },
        "minute": {
          "type": "integer",
          "format": "int32",
          "description": "Minute."
        },
        "month": {
          "type": "integer",
          "format": "int32",
          "description": "Month."
        },
        "second": {
          "type": "integer",
          "format": "int32",
          "description": "Second."
        },
        "week": {
          "type": "integer",
          "format": "int32",
          "description": "Week."
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "description": "Year."
        }
      },
      "title": "TimeParam",
      "description": "Represents a time param."
    },
    "TimePeriod": {
      "type": "object",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "1985-04-12T23:20:50.523Z",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "1985-04-12T23:20:50.523Z",
          "description": "Start of the time period, using IETC-RFC-3339 format"
        }
      },
      "title": "TimePeriod",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
    }
  }
}
